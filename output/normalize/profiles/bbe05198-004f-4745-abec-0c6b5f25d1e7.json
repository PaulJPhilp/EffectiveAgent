{
  "id": "bbe05198-004f-4745-abec-0c6b5f25d1e7",
  "sourceProfileId": "18d21bc6-5f01-4456-890a-cf398d1bd05a",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Apply standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific normalizations\n        company_name = company_name.replace(\"Inc.\", \"Inc\")\n        company_name = company_name.replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        \n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() in [\"class management\", \"classroom mgmt\"]:\n            skill = \"Classroom Management\"\n        # Add more skill normalizations as needed\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.strip()\n        location = location.replace(\"NYC\", \"New York\")\n\n        if \",\" in location:\n            parts = [s.strip() for s in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"TX\":\n                    location = f\"{city}, Texas, United States\"\n                elif state == \"New York\":\n                    location = f\"{city}, New York, United States\"\n                # Add more state normalizations as needed\n            elif len(parts) == 3:\n                # Assuming City, State, Country format already\n                pass\n            elif \"Area\" in location:\n                city = parts[0]\n                state = parts[1].replace(\" Area\", \"\")\n                location = f\"{city}, {state}, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n        experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n        experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n        if \"duration\" in experience:\n            duration = experience[\"duration\"]\n            duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n            duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Add normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: {profile['title']} -> {normalized_profile['title']}\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: {profile['location']} -> {normalized_profile['location']}\")\n    \n    if normalized_profile.get(\"key_skills\") != profile.get(\"key_skills\"):\n        normalization_notes.append(f\"Standardized key skills: {profile.get('key_skills')} -> {normalized_profile.get('key_skills')}\")\n    \n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}