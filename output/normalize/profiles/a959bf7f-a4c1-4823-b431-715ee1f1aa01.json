{
  "id": "a959bf7f-a4c1-4823-b431-715ee1f1aa01",
  "sourceProfileId": "99d59d37-592b-4ae9-be70-d966c319ebcb",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n\n        # Standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific normalizations\n        company_name = company_name.replace(\"Inc.\", \"Inc\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Self-employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.strip()\n        if location.lower() == \"nyc, new york\":\n            location = \"New York, New York, United States\"\n            if \"Standardized NYC to full city name\" not in normalization_notes:\n                normalization_notes.append(\"Standardized NYC to full city name\")\n        elif location.lower() == \"dallas, tx\":\n            location = \"Dallas, Texas, United States\"\n        elif \"austin, texas area\" in location.lower():\n            location = \"Austin, Texas, United States\"\n        elif location.lower() == \"new york city\":\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    if \"location\" in normalized_profile:\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n\n# Example usage with the provided input\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}