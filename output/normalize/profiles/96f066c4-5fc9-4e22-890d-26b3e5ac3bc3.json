{
  "id": "96f066c4-5fc9-4e22-890d-26b3e5ac3bc3",
  "sourceProfileId": "583a8821-da55-4f3f-a3b6-c683682b7e83",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the defined guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        if company_name.upper() == company_name and company_name.isupper() and company_name != \"Self-Employed\":\n            # Handle all-caps company names (e.g., \"ACME\")\n            normalized_name = \"\".join([word.capitalize() for word in company_name.split()])\n            return normalized_name\n\n        company_name = company_name.replace(\"â€™\", \"'\")\n        company_name = company_name.replace(\"`\", \"'\")\n\n        # Apply standard capitalization (title case)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.upper() in [\"INC\", \"LLC\", \"LTD\", \"GMBH\", \"SA\", \"SE\", \"AG\"]:\n                normalized_words.append(word.upper())\n            else:\n                normalized_words.append(word.capitalize())\n        normalized_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Incorporated\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Corporation\", \"Corp.\")\n        normalized_name = normalized_name.replace(\"Company\", \"Co.\")\n        normalized_name = normalized_name.replace(\"Limited\", \"Ltd.\")\n        normalized_name = normalized_name.replace(\"Llc\", \"LLC\")\n        normalized_name = normalized_name.replace(\"Gmbh\", \"GmbH\")\n        normalized_name = normalized_name.replace(\"Sa\", \"SA\")\n        normalized_name = normalized_name.replace(\"Se\", \"SE\")\n        normalized_name = normalized_name.replace(\"Ag\", \"AG\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n        normalized_name = normalized_name.replace(\"Self-employed\", \"Self-Employed\")\n\n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                if parts[0].lower() in [\"manager\", \"director\", \"vp\", \"vice president\", \"president\"]:\n                    job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n\n        if \",\" not in location:\n            return location # Cannot normalize without comma separation\n\n        parts = [s.strip() for s in location.split(\",\")]\n\n        if len(parts) == 2:\n            city, state = parts\n            states_mapping = {\n                \"TX\": \"Texas\",\n                \"NY\": \"New York\"\n            }\n            if state.upper() in states_mapping:\n                state = states_mapping[state.upper()]\n            return f\"{city}, {state}, United States\"\n        elif len(parts) == 3:\n            return \", \".join(parts) # Assume already normalized\n        else:\n            return location # Cannot normalize\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Add normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile:\n        for i in range(min(len(profile[\"key_skills\"]), len(normalized_profile[\"key_skills\"]))):\n            if profile[\"key_skills\"][i] != normalized_profile[\"key_skills\"][i]:\n                normalization_notes.append(f\"Standardized skill from '{profile['key_skills'][i]}' to '{normalized_profile['key_skills'][i]}'\")\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(len(profile[\"experience\"])):\n            if \"company\" in profile[\"experience\"][i] and \"company\" in normalized_profile[\"experience\"][i]:\n                if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                    normalization_notes.append(f\"Standardized company name from '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if \"duration\" in profile[\"experience\"][i] and \"duration\" in normalized_profile[\"experience\"][i]:\n                if \"start_date\" in profile[\"experience\"][i][\"duration\"] and \"start_date\" in normalized_profile[\"experience\"][i][\"duration\"]:\n                    if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Standardized start date from '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n                if \"end_date\" in profile[\"experience\"][i][\"duration\"] and \"end_date\" in normalized_profile[\"experience\"][i][\"duration\"]:\n                    if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"Standardized end date from '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n\n# Example usage with the provided input profile:\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}