{
  "id": "294e799d-a774-4dba-a514-c2cfe362f0bb",
  "sourceProfileId": "7d3d4669-db3a-40e2-91be-c2696d99f4e1",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip() # remove extra spaces\n\n        # Standard capitalization (proper case, preserve acronyms)\n        if company_name.isupper() and company_name not in [\"ACME\", \"LUME\"]:\n            normalized_name = company_name\n        else:\n            normalized_name = ' '.join([word.capitalize() for word in company_name.split()])\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Corp.\", \"Corp\").replace(\"Corporation\", \"Corp\")\n        normalized_name = normalized_name.replace(\"Llc\", \"LLC\").replace(\"Ltd.\", \"Ltd\")\n        normalized_name = normalized_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize common role titles\n        if \"Marketing Manager\" in job_title or \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n        \n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n            if \"Standardized NYC to full city name\" not in normalization_notes:\n                normalization_notes.append(\"Standardized NYC to full city name\")\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        \n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n            if \"end_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}