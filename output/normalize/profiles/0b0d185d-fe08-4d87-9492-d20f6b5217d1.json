{
  "id": "0b0d185d-fe08-4d87-9492-d20f6b5217d1",
  "sourceProfileId": "6f73528b-9f2b-423f-a906-ee8ca9f300ba",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        company_name = company_name.replace('&amp;', '&') # Handle HTML entities\n\n        # Standardize capitalization (proper case, but preserve acronyms)\n        if company_name.isupper() and company_name != \"ACME\": #Added ACME exception\n            normalized_name = company_name\n        else:\n            normalized_name = ' '.join([word.capitalize() if word.lower() not in ['inc', 'llc', 'corp', 'co'] else word.upper() if word.lower() in ['inc', 'llc', 'corp', 'co'] else word.capitalize() for word in company_name.split()])\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Llc\", \"LLC\")\n        normalized_name = normalized_name.replace(\"Corp.\", \"Corp\")\n        normalized_name = normalized_name.replace(\"Co.\", \"Co\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n        normalized_name = normalized_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n\n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr \", \"Senior \")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\").replace(\"Assoc \", \"Associate \")\n        job_title = job_title.replace(\"Proj.\", \"Project\").replace(\"Proj \", \"Project \")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n\n        # Standardize capitalization (proper case)\n        normalized_title = ' '.join(word.capitalize() for word in job_title.split())\n\n        return normalized_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York, United States\")\n        location = location.replace(\"New York City\", \"New York, New York, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\").replace(\"Feb\", \"February\").replace(\"Mar\", \"March\").replace(\"Apr\", \"April\").replace(\"May\", \"May\").replace(\"Jun\", \"June\").replace(\"Jul\", \"July\").replace(\"Aug\", \"August\").replace(\"Sep\", \"September\").replace(\"Oct\", \"October\").replace(\"Nov\", \"November\").replace(\"Dec\", \"December\")\n\n        if \"Present\" in date_string:\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        if experience[\"duration\"][\"end_date\"] != \"Present\":\n            experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    for i, (original_exp, normalized_exp) in enumerate(zip(profile[\"experience\"], normalized_profile[\"experience\"])):\n        if original_exp[\"company\"] != normalized_exp[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: '{original_exp['company']}' to '{normalized_exp['company']}'\")\n        if original_exp[\"title\"] != normalized_exp[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: '{original_exp['title']}' to '{normalized_exp['title']}'\")\n        if original_exp[\"location\"] != normalized_exp[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1}: '{original_exp['location']}' to '{normalized_exp['location']}'\")\n        if original_exp[\"duration\"][\"start_date\"] != normalized_exp[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: '{original_exp['duration']['start_date']}' to '{normalized_exp['duration']['start_date']}'\")\n        if original_exp[\"duration\"][\"end_date\"] != normalized_exp[\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: '{original_exp['duration']['end_date']}' to '{normalized_exp['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}