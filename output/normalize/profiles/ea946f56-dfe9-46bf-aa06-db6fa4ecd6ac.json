{
  "id": "ea946f56-dfe9-46bf-aa06-db6fa4ecd6ac",
  "sourceProfileId": "b7f778ac-81c1-402b-b4bf-a78829e74db2",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Apply standard capitalization (proper case)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and word not in [\"ACME\", \"LUME\"]:  # Preserve known acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\").replace(\"Ltd\", \"Ltd.\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        \n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n        \n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        # Add more skill normalization rules as needed\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        if \"New York, New York\" in location and \"United States\" not in location:\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    continue\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            exp[\"company\"] = normalize_company_name(exp.get(\"company\", \"\"))\n            exp[\"title\"] = normalize_job_title(exp.get(\"title\", \"\"))\n            exp[\"location\"] = normalize_location(exp.get(\"location\", \"\"))\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    \n    if \"experience\" in profile:\n        for i in range(len(profile[\"experience\"])):\n            if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                normalization_notes.append(f\"Standardized company name: '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if profile[\"experience\"][i][\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n                normalization_notes.append(f\"Standardized job title in experience: '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n            if profile[\"experience\"][i][\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n                normalization_notes.append(f\"Standardized location in experience: '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                normalization_notes.append(f\"Standardized start date in experience: '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date in experience: '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n# Example Usage (replace with your actual input)\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}