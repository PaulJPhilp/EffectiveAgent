{
  "id": "80ef2115-7f64-46f3-8e34-3a3a2eac7788",
  "sourceProfileId": "5e4bda1c-d001-4707-9dd5-3021a1273c60",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = company_name.replace(\"â€™\", \"'\")  # Standardize apostrophes\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Co.\", \"Company\")\n\n        # Proper case, but preserve acronyms\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        if company_name == \"Self Employed\":\n            company_name = \"Self-Employed\"\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager, \" in job_title:\n            parts = job_title.split(\", \")\n            job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill == \"Salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill in [\"Class Management\", \"Classroom Mgmt\"]:\n            skill = \"Classroom Management\"\n        elif skill == \"Digital Mktg\":\n            skill = \"Digital Marketing\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if location == \"Dallas, TX\":\n            location = \"Dallas, Texas, United States\"\n        elif location == \"Austin, Texas Area\":\n            location = \"Austin, Texas, United States\"\n        elif location == \"New York, New York, United States\":\n            location = \"New York, New York, United States\"\n        elif location == \"London\":\n            location = \"London, England, United Kingdom\"\n        elif location == \"Greater Seattle Area\":\n            location = \"Seattle, Washington, United States\"\n        elif location == \"SF Bay Area\":\n            location = \"San Francisco Bay Area, California, United States\"\n        elif location == \"San Francisco, California\":\n            location = \"San Francisco, California, United States\"\n        elif location == \"Greater New York City Area\":\n            location = \"New York, New York, United States\"\n        elif location == \"Remote\":\n            location = \"Remote\"\n        elif location == \"United States\":\n            location = \"United States\"\n        elif location == \"New York, NY\":\n            location = \"New York, New York, United States\"\n        elif location == \"Los Angeles, CA\":\n            location = \"Los Angeles, California, United States\"\n        elif location == \"Chicago, IL\":\n            location = \"Chicago, Illinois, United States\"\n        elif location == \"San Diego, CA\":\n            location = \"San Diego, California, United States\"\n        elif location == \"Boston, MA\":\n            location = \"Boston, Massachusetts, United States\"\n        elif location == \"Philadelphia, PA\":\n            location = \"Philadelphia, Pennsylvania, United States\"\n        elif location == \"Phoenix, AZ\":\n            location = \"Phoenix, Arizona, United States\"\n        elif location == \"San Antonio, TX\":\n            location = \"San Antonio, Texas, United States\"\n        elif location == \"San Jose, CA\":\n            location = \"San Jose, California, United States\"\n        elif location == \"Jacksonville, FL\":\n            location = \"Jacksonville, Florida, United States\"\n        elif location == \"Indianapolis, IN\":\n            location = \"Indianapolis, Indiana, United States\"\n        elif location == \"Columbus, OH\":\n            location = \"Columbus, Ohio, United States\"\n        elif location == \"Charlotte, NC\":\n            location = \"Charlotte, North Carolina, United States\"\n        elif location == \"Fort Worth, TX\":\n            location = \"Fort Worth, Texas, United States\"\n        elif location == \"Detroit, MI\":\n            location = \"Detroit, Michigan, United States\"\n        elif location == \"El Paso, TX\":\n            location = \"El Paso, Texas, United States\"\n        elif location == \"Memphis, TN\":\n            location = \"Memphis, Tennessee, United States\"\n        elif location == \"Seattle, WA\":\n            location = \"Seattle, Washington, United States\"\n        elif location == \"Denver, CO\":\n            location = \"Denver, Colorado, United States\"\n        elif location == \"Washington, DC\":\n            location = \"Washington, District of Columbia, United States\"\n        elif location == \"Nashville, TN\":\n            location = \"Nashville, Tennessee, United States\"\n        elif location == \"Baltimore, MD\":\n            location = \"Baltimore, Maryland, United States\"\n        elif location == \"Louisville, KY\":\n            location = \"Louisville, Kentucky, United States\"\n        elif location == \"Portland, OR\":\n            location = \"Portland, Oregon, United States\"\n        elif location == \"Oklahoma City, OK\":\n            location = \"Oklahoma City, Oklahoma, United States\"\n        elif location == \"Las Vegas, NV\":\n            location = \"Las Vegas, Nevada, United States\"\n        elif location == \"Milwaukee, WI\":\n            location = \"Milwaukee, Wisconsin, United States\"\n        elif location == \"Albuquerque, NM\":\n            location = \"Albuquerque, New Mexico, United States\"\n        elif location == \"Tucson, AZ\":\n            location = \"Tucson, Arizona, United States\"\n        elif location == \"Fresno, CA\":\n            location = \"Fresno, California, United States\"\n        elif location == \"Sacramento, CA\":\n            location = \"Sacramento, California, United States\"\n        elif location == \"Long Beach, CA\":\n            location = \"Long Beach, California, United States\"\n        elif location == \"Kansas City, MO\":\n            location = \"Kansas City, Missouri, United States\"\n        elif location == \"Mesa, AZ\":\n            location = \"Mesa, Arizona, United States\"\n        elif location == \"Atlanta, GA\":\n            location = \"Atlanta, Georgia, United States\"\n        elif location == \"Virginia Beach, VA\":\n            location = \"Virginia Beach, Virginia, United States\"\n        elif location == \"Omaha, NE\":\n            location = \"Omaha, Nebraska, United States\"\n        elif location == \"Raleigh, NC\":\n            location = \"Raleigh, North Carolina, United States\"\n        elif location == \"Miami, FL\":\n            location = \"Miami, Florida, United States\"\n        elif location == \"Oakland, CA\":\n            location = \"Oakland, California, United States\"\n        elif location == \"Minneapolis, MN\":\n            location = \"Minneapolis, Minnesota, United States\"\n        elif location == \"Tulsa, OK\":\n            location = \"Tulsa, Oklahoma, United States\"\n        elif location == \"Cleveland, OH\":\n            location = \"Cleveland, Ohio, United States\"\n        elif location == \"Wichita, KS\":\n            location = \"Wichita, Kansas, United States\"\n        elif location == \"Arlington, TX\":\n            location = \"Arlington, Texas, United States\"\n        elif location == \"New Orleans, LA\":\n            location = \"New Orleans, Louisiana, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Apply normalizations\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Add normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if normalized_profile[\"key_skills\"] != profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n\n    for i, (normalized_experience, original_experience) in enumerate(zip(normalized_profile[\"experience\"], profile[\"experience\"])):\n        if normalized_experience[\"company\"] != original_experience[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1} from '{original_experience['company']}' to '{normalized_experience['company']}'\")\n        if normalized_experience[\"title\"] != original_experience[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1} from '{original_experience['title']}' to '{normalized_experience['title']}'\")\n        if normalized_experience[\"location\"] != original_experience[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1} from '{original_experience['location']}' to '{normalized_experience['location']}'\")\n        if normalized_experience[\"duration\"][\"start_date\"] != original_experience[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience {i+1} from '{original_experience['duration']['start_date']}' to '{normalized_experience['duration']['start_date']}'\")\n        if normalized_experience[\"duration\"][\"end_date\"] != original_experience[\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience {i+1} from '{original_experience['duration']['end_date']}' to '{normalized_experience['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}