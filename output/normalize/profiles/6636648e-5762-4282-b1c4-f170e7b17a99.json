{
  "id": "6636648e-5762-4282-b1c4-f170e7b17a99",
  "sourceProfileId": "cb15dd25-5734-47a6-9907-6b85a728aca9",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the given guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        \n        # Common replacements\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Co.\", \"Company\")\n\n        if company_name.upper() == company_name and company_name not in [\"ACME\", \"IBM\", \"SAP\", \"AWS\"]:\n            # If all caps and not a known acronym, title case\n            company_name = company_name.title()\n        elif company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n        else:\n            company_name = ' '.join([word.capitalize() if word.lower() != \"llc\" else \"LLC\" for word in company_name.split()])\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize capitalization (title case)\n        job_title = ' '.join(word.capitalize() for word in job_title.split())\n        \n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() in [\"class management\", \"classroom mgmt\"]:\n            skill = \"Classroom Management\"\n        # Add more skill normalizations here as needed\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n\n        if \",\" not in location:\n            return location + \", United States\"\n\n        parts = [s.strip() for s in location.split(\",\")]\n        if len(parts) == 2:\n            city, state = parts\n            # Basic state abbreviation check (improve as needed)\n            if len(state) <= 3:\n                # Add state name expansion here if needed\n                if state.upper() == \"TX\":\n                    state = \"Texas\"\n                location = f\"{city}, {state}, United States\"\n            else:\n                location = f\"{city}, {state}, United States\"\n        elif len(parts) == 3:\n            # Assuming City, State, Country format\n            pass  # Already in desired format (for now)\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return original date string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Add normalization notes (example)\n    if \"NYC\" in profile[\"location\"] or \"New York City\" in profile[\"location\"]:\n        normalization_notes.append(\"Standardized NYC to full city name\")\n    if \"Mktg\" in profile[\"title\"] or any(\"Mktg\" in skill for skill in profile[\"key_skills\"]):\n        normalization_notes.append(\"Expanded marketing abbreviations\")\n    \n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n# Example Usage (replace with your actual input)\ninput_profile = {\n      \"name\": \"John Smith\",\n      \"title\": \"Sr. Marketing Mgr\",\n      \"location\": \"NYC, New York\",\n      \"key_skills\": [\n        \"Digital Mktg\",\n        \"Salesforce.com\",\n        \"Content Strategy\"\n      ],\n      \"experience\": [\n        {\n          \"company\": \"ACME corp.\",\n          \"title\": \"Senior Mktg Manager\",\n          \"duration\": {\n            \"start_date\": \"January 2020\",\n            \"end_date\": \"Present\",\n            \"date_range\": \"3 years 2 months\"\n          },\n          \"location\": \"New York City\"\n        }\n      ]\n    }\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}