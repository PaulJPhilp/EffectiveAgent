{
  "id": "751809d1-01d5-4bc0-ac10-cfd7c7848b7d",
  "sourceProfileId": "b5183a00-4ec9-4442-8f72-405364505130",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the defined guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n        company_name = company_name.replace(\"â€™\", \"'\") # Standardize apostrophes\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Co.\", \"Company\")\n        company_name = company_name.replace(\"&\", \"and\")\n\n        if company_name.upper() == \"CHANEL\":\n            return \"CHANEL\" #Preserve all caps\n        if company_name.lower() == \"self-employed\":\n            return \"Self-Employed\"\n        if company_name == \"FleishmanHillard\":\n            return \"Fleishman-Hillard\"\n        if company_name == \"LUME studios\":\n            return \"LUME Studios\"\n\n        # Proper case for most names\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1: # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill == \"Salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill in [\"Classroom Management\", \"Class Management\"]:\n            skill = \"Classroom Management\"\n        elif skill == \"Digital Mktg\":\n            skill = \"Digital Marketing\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if location == \"Dallas, TX\":\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        elif location == \"New York, New York, United States\":\n            location = \"New York, New York, United States\"\n\n        # Add United States if only city and state are provided\n        parts = location.split(',')\n        if len(parts) == 2:\n            city, state = map(str.strip, parts)\n            location = f\"{city}, {state}, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_str):\n        if not date_str:\n            return date_str\n\n        date_str = date_str.replace(\"Jan\", \"January\")\n        date_str = date_str.replace(\"Feb\", \"February\")\n        date_str = date_str.replace(\"Mar\", \"March\")\n        date_str = date_str.replace(\"Apr\", \"April\")\n        date_str = date_str.replace(\"May\", \"May\")\n        date_str = date_str.replace(\"Jun\", \"June\")\n        date_str = date_str.replace(\"Jul\", \"July\")\n        date_str = date_str.replace(\"Aug\", \"August\")\n        date_str = date_str.replace(\"Sep\", \"September\")\n        date_str = date_str.replace(\"Oct\", \"October\")\n        date_str = date_str.replace(\"Nov\", \"November\")\n        date_str = date_str.replace(\"Dec\", \"December\")\n\n        if date_str.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Try parsing as \"Month YYYY\"\n            date_object = datetime.strptime(date_str, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            # Try parsing as \"MM/YYYY\"\n            date_object = datetime.strptime(date_str, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_str  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n            if \"end_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n\n    if profile.get(\"key_skills\") != normalized_profile.get(\"key_skills\"):\n        normalization_notes.append(f\"Standardized skills: '{profile.get('key_skills')}' to '{normalized_profile.get('key_skills')}'\")\n\n    for i, (original_exp, normalized_exp) in enumerate(zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        if original_exp[\"company\"] != normalized_exp[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: '{original_exp['company']}' to '{normalized_exp['company']}'\")\n        if original_exp[\"title\"] != normalized_exp[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: '{original_exp['title']}' to '{normalized_exp['title']}'\")\n        if original_exp[\"location\"] != normalized_exp[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1}: '{original_exp['location']}' to '{normalized_exp['location']}'\")\n        if original_exp[\"duration\"].get(\"start_date\") != normalized_exp[\"duration\"].get(\"start_date\"):\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: '{original_exp['duration'].get('start_date')}' to '{normalized_exp['duration'].get('start_date')}'\")\n        if original_exp[\"duration\"].get(\"end_date\") != normalized_exp[\"duration\"].get(\"end_date\"):\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: '{original_exp['duration'].get('end_date')}' to '{normalized_exp['duration'].get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}