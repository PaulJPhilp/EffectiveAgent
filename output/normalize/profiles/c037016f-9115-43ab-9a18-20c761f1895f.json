{
  "id": "c037016f-9115-43ab-9a18-20c761f1895f",
  "sourceProfileId": "d32abc34-b836-46be-855e-8931f5d4a260",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('  ', ' ') # Remove double spaces again after period standardization\n\n        if company_name.upper() == company_name and len(company_name.split()) == 1:\n            # Preserve all-caps for single-word acronyms/initialisms\n            pass\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Inc.\")  # Common abbreviation\n        company_name = company_name.replace(\"Corp.\", \"Corp.\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n        company_name = company_name.replace(\"L. L. C.\", \"LLC\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and (\"Manager\" in parts[1] or \"Director\" in parts[1] or \"Lead\" in parts[1]):\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"New York City\", \"New York, New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \", New York\" in location and \", United States\" not in location:\n            location = location + \", United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if \"Present\" in date_string:\n            return \"Present\"\n\n        try:\n            # Try parsing as \"January 2020\"\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            # Try parsing as \"01/2020\"\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n        experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n        experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n        if \"duration\" in experience:\n            duration = experience[\"duration\"]\n            duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n            duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: {profile['title']} -> {normalized_profile['title']}\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: {profile['location']} -> {normalized_profile['location']}\")\n    if any(profile[\"key_skills\"][i] != normalized_profile[\"key_skills\"][i] for i in range(len(profile[\"key_skills\"]))):\n        normalization_notes.append(\"Standardized key skills\")\n    for i, exp in enumerate(profile.get(\"experience\", [])):\n        if exp[\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n            normalization_notes.append(f\"Standardized company name: {exp['company']} -> {normalized_profile['experience'][i]['company']}\")\n        if exp[\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience: {exp['title']} -> {normalized_profile['experience'][i]['title']}\")\n        if exp[\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience: {exp['location']} -> {normalized_profile['experience'][i]['location']}\")\n        if exp[\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience: {exp['duration']['start_date']} -> {normalized_profile['experience'][i]['duration']['start_date']}\")\n        if exp[\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience: {exp['duration']['end_date']} -> {normalized_profile['experience'][i]['duration']['end_date']}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}