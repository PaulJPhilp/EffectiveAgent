{
  "id": "26bcfc3d-b96c-4368-a04a-2f7a4e7efc71",
  "sourceProfileId": "518461d4-4f90-414a-9d3a-e7cb44a25f1a",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = company_name.replace(\"â€™\", \"'\") # Standardize apostrophes\n\n        # Standardize Inc. vs Incorporated, Corp. vs Corporation, etc.\n        company_name = re.sub(r\"\\bInc\\.\\b\", \"Incorporated\", company_name, flags=re.IGNORECASE)\n        company_name = re.sub(r\"\\bCorp\\.\\b\", \"Corporation\", company_name, flags=re.IGNORECASE)\n        company_name = re.sub(r\"\\bLtd\\.\\b\", \"Limited\", company_name, flags=re.IGNORECASE)\n        company_name = re.sub(r\"\\bLLC\\b\", \"LLC\", company_name, flags=re.IGNORECASE) #Keep LLC as all caps\n        company_name = re.sub(r\"\\bLLP\\b\", \"LLP\", company_name, flags=re.IGNORECASE) #Keep LLP as all caps\n\n        if company_name.upper() in [\"IBM\", \"GE\", \"AT&T\", \"HP\", \"SAP\", \"LUME Studios\"]:\n            return company_name.upper() # Preserve well-known acronyms in all caps\n\n        if company_name.lower() == \"self-employed\":\n            return \"Self-Employed\"\n\n        # Proper case for most names\n        words = [word.capitalize() for word in company_name.split()]\n        company_name = \" \".join(words)\n\n        # Specific cases\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"New York City\", \"New York, New York\")\n        if \", New York\" in location and \", United States\" not in location:\n            location = location + \", United States\"\n            normalization_notes.append(\"Added United States to New York location\")\n\n        if \"Dallas, TX\" in location and \", United States\" not in location:\n            location = \"Dallas, Texas, United States\"\n            normalization_notes.append(\"Standardized Dallas, TX to Dallas, Texas, United States\")\n\n        if \"Austin, Texas Area\" in location and \", United States\" not in location:\n            location = \"Austin, Texas, United States\"\n            normalization_notes.append(\"Standardized Austin, Texas Area to Austin, Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Sept\", \"Sep\") # handle abbrev\n        date_string = date_string.replace(\"Okt\", \"Oct\") # handle abbrev\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}