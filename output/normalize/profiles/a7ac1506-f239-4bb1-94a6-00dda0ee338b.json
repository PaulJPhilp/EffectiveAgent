{
  "id": "a7ac1506-f239-4bb1-94a6-00dda0ee338b",
  "sourceProfileId": "ac6b9fd4-3040-481b-b63e-72b5393a4662",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n\n        # Standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific replacements\n        company_name = company_name.replace(\"Corp.\", \"Corp.\")\n        company_name = company_name.replace(\"Inc.\", \"Inc.\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"L.l.c.\", \"LLC\")\n        company_name = company_name.replace(\"L. L. C.\", \"LLC\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\") #Preserve all caps\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Present\", \"Present\")\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            formats = [\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"]\n            for fmt in formats:\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        # Normalize dates\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n            if \"end_date\" in experience[\"duration\"] and experience[\"duration\"][\"end_date\"] != \"Present\":\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect Normalization Notes\n    if profile[\"title\"] != normalized_profile[\"title\"] or profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(\"Standardized job title and location format.\")\n    if any(s1 != s2 for s1, s2 in zip(profile.get(\"key_skills\", []), normalized_profile.get(\"key_skills\", []))):\n        normalization_notes.append(\"Standardized skill names.\")\n    if any(exp1[\"company\"] != exp2[\"company\"] for exp1, exp2 in zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        normalization_notes.append(\"Standardized company names.\")\n    if any(exp1[\"title\"] != exp2[\"title\"] for exp1, exp2 in zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        normalization_notes.append(\"Standardized job titles in experience.\")\n    if any(exp1[\"location\"] != exp2[\"location\"] for exp1, exp2 in zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        normalization_notes.append(\"Standardized locations in experience.\")\n    if any(exp1[\"duration\"][\"start_date\"] != exp2[\"duration\"][\"start_date\"] for exp1, exp2 in zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", [])) if \"duration\" in exp1 and \"duration\" in exp2):\n        normalization_notes.append(\"Standardized dates in experience.\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}