{
  "id": "037821d1-1a7c-4ed8-8310-61127a7aed7d",
  "sourceProfileId": "ee9caa95-f59c-4cb8-bd70-493a46a3b5cb",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n\n        # Standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific normalizations\n        company_name = company_name.replace(\"Corp.\", \"Corp.\")\n        company_name = company_name.replace(\"Inc.\", \"Inc.\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\") #Preserve all caps\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n\n    for i in range(len(profile[\"experience\"])):\n        if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n            normalization_notes.append(f\"Standardized company name: '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n        if profile[\"experience\"][i][\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience: '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n        if profile[\"experience\"][i][\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience: '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n        if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience: '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n        if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience: '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}