{
  "id": "a0a25419-7763-44c2-b99e-fc50c76a4c85",
  "sourceProfileId": "f840b83c-7c5a-401f-903e-117aafd9b5b4",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and word not in [\"ACME\", \"LUME\"]:  # Preserve well-known acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\")\n        company_name = company_name.replace(\"Llc.\", \"LLC\")\n        company_name = company_name.replace(\"L.l.c.\", \"LLC\")\n        company_name = company_name.replace(\"Ldt.\", \"Ltd.\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n        if \"Manager, Sales\" in job_title:\n            job_title = \"Sales Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n        location = location.replace(\"New York City\", \"New York, New York, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Sept\", \"Sep\") # handle abbreviation issues\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n            return date_object.strftime(\"%Y-%m-%d\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n            experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n            experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if \"end_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Add normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and normalized_profile[\"key_skills\"] != profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized key skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile:\n        for i, exp in enumerate(profile[\"experience\"]):\n            if \"company\" in exp and exp[\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                normalization_notes.append(f\"Standardized company name from '{exp['company']}' to '{normalized_profile['experience'][i]['company']}' in experience {i+1}\")\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"] and exp[\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                    normalization_notes.append(f\"Standardized start date from '{exp['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}' in experience {i+1}\")\n                if \"end_date\" in exp[\"duration\"] and exp[\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                    normalization_notes.append(f\"Standardized end date from '{exp['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}' in experience {i+1}\")\n            if \"location\" in exp and exp[\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n                normalization_notes.append(f\"Standardized location from '{exp['location']}' to '{normalized_profile['experience'][i]['location']}' in experience {i+1}\")\n            if \"title\" in exp and exp[\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n                normalization_notes.append(f\"Standardized title from '{exp['title']}' to '{normalized_profile['experience'][i]['title']}' in experience {i+1}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}