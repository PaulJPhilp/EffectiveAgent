{
  "id": "f438dae3-1fae-45fd-ac9a-88ba077af807",
  "sourceProfileId": "4a56ae61-4a45-47a2-911a-86142f2cff2b",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        company_name = company_name.replace('&amp;', '&') # Handle HTML entities\n\n        # Apply standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() not in ['inc', 'llc', 'corp', 'co'] else word.upper() if word.lower() in ['inc', 'llc', 'corp', 'co'] else word for word in company_name.split()])\n\n        # Specific company name normalizations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\").replace(\"Corporation\", \"Corp\")\n        company_name = company_name.replace(\"Llc.\", \"LLC\").replace(\"Limited Liability Company\", \"LLC\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr \", \"Senior \")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize capitalization (first letter of each word)\n        job_title = ' '.join(word.capitalize() for word in job_title.split())\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \",\" not in location and \"United States\" not in location:\n            location = location + \", United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\").replace(\"Feb\", \"February\").replace(\"Mar\", \"March\").replace(\"Apr\", \"April\").replace(\"May\", \"May\").replace(\"Jun\", \"June\").replace(\"Jul\", \"July\").replace(\"Aug\", \"August\").replace(\"Sep\", \"September\").replace(\"Oct\", \"October\").replace(\"Nov\", \"November\").replace(\"Dec\", \"December\")\n\n        if \"Present\" in date_string:\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            try:\n                date_object = datetime.strptime(date_string, \"%m/%Y\")\n                return date_object.strftime(\"%Y-%m\")\n            except ValueError:\n                return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile['title'] = normalize_job_title(normalized_profile.get('title', ''))\n    normalized_profile['location'] = normalize_location(normalized_profile.get('location', ''))\n\n    # Normalize skills\n    if 'key_skills' in normalized_profile and isinstance(normalized_profile['key_skills'], list):\n        normalized_profile['key_skills'] = [normalize_skill(skill) for skill in normalized_profile['key_skills']]\n\n    # Normalize experience\n    if 'experience' in normalized_profile and isinstance(normalized_profile['experience'], list):\n        for experience in normalized_profile['experience']:\n            if 'company' in experience:\n                experience['company'] = normalize_company_name(experience['company'])\n            if 'title' in experience:\n                experience['title'] = normalize_job_title(experience['title'])\n            if 'location' in experience:\n                experience['location'] = normalize_location(experience['location'])\n            if 'duration' in experience:\n                if 'start_date' in experience['duration']:\n                    experience['duration']['start_date'] = normalize_date(experience['duration']['start_date'])\n                if 'end_date' in experience['duration']:\n                    experience['duration']['end_date'] = normalize_date(experience['duration']['end_date'])\n\n    # Collect normalization notes\n    if profile['title'] != normalized_profile['title']:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile['location'] != normalized_profile['location']:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if 'key_skills' in profile and 'key_skills' in normalized_profile and profile['key_skills'] != normalized_profile['key_skills']:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if 'experience' in profile and 'experience' in normalized_profile:\n        for i, (original_exp, normalized_exp) in enumerate(zip(profile['experience'], normalized_profile['experience'])):\n            if original_exp.get('company') != normalized_exp.get('company'):\n                normalization_notes.append(f\"Standardized company name in experience {i+1} from '{original_exp.get('company')}' to '{normalized_exp.get('company')}'\")\n            if original_exp.get('title') != normalized_exp.get('title'):\n                normalization_notes.append(f\"Standardized job title in experience {i+1} from '{original_exp.get('title')}' to '{normalized_exp.get('title')}'\")\n            if original_exp.get('location') != normalized_exp.get('location'):\n                normalization_notes.append(f\"Standardized location in experience {i+1} from '{original_exp.get('location')}' to '{normalized_exp.get('location')}'\")\n            if original_exp.get('duration', {}).get('start_date') != normalized_exp.get('duration', {}).get('start_date'):\n                normalization_notes.append(f\"Standardized start date in experience {i+1} from '{original_exp.get('duration', {}).get('start_date')}' to '{normalized_exp.get('duration', {}).get('start_date')}'\")\n            if original_exp.get('duration', {}).get('end_date') != normalized_exp.get('duration', {}).get('end_date'):\n                normalization_notes.append(f\"Standardized end date in experience {i+1} from '{original_exp.get('duration', {}).get('end_date')}' to '{normalized_exp.get('duration', {}).get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile['normalization_notes'] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}