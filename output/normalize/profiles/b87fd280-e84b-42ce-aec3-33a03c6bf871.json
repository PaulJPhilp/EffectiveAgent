{
  "id": "b87fd280-e84b-42ce-aec3-33a03c6bf871",
  "sourceProfileId": "9c8d7e36-bcd4-4744-b960-4dd2e72fcc9e",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip() # Remove extra spaces\n        company_name = company_name.replace('&amp;', '&')\n        \n        # Standardize capitalization (proper case)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and word not in [\"ACME\", \"LUME\"]: # Preserve well-known acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and \"Manager\" in parts[1]:\n                job_title = parts[1] + \" \" + parts[0]\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        elif \"New York City\" in location:\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        original_title = normalized_profile[\"title\"]\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n        if original_title != normalized_profile[\"title\"]:\n            normalization_notes.append(f\"Standardized job title: '{original_title}' to '{normalized_profile['title']}'\")\n\n    if \"location\" in normalized_profile:\n        original_location = normalized_profile[\"location\"]\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n        if original_location != normalized_profile[\"location\"]:\n            normalization_notes.append(f\"Standardized location: '{original_location}' to '{normalized_profile['location']}'\")\n\n    if \"key_skills\" in normalized_profile:\n        original_skills = normalized_profile[\"key_skills\"]\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n        if original_skills != normalized_profile[\"key_skills\"]:\n             normalization_notes.append(f\"Standardized skills: '{original_skills}' to '{normalized_profile['key_skills']}'\")\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                original_company = exp[\"company\"]\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n                if original_company != exp[\"company\"]:\n                    normalization_notes.append(f\"Standardized company name: '{original_company}' to '{exp['company']}'\")\n\n            if \"title\" in exp:\n                original_title = exp[\"title\"]\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n                if original_title != exp[\"title\"]:\n                    normalization_notes.append(f\"Standardized job title: '{original_title}' to '{exp['title']}'\")\n\n            if \"location\" in exp:\n                original_location = exp[\"location\"]\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n                if original_location != exp[\"location\"]:\n                    normalization_notes.append(f\"Standardized location: '{original_location}' to '{exp['location']}'\")\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    original_start_date = exp[\"duration\"][\"start_date\"]\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                    if original_start_date != exp[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Standardized start date: '{original_start_date}' to '{exp['duration']['start_date']}'\")\n                if \"end_date\" in exp[\"duration\"]:\n                    original_end_date = exp[\"duration\"][\"end_date\"]\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n                    if original_end_date != exp[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"Standardized end date: '{original_end_date}' to '{exp['duration']['end_date']}'\")\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}