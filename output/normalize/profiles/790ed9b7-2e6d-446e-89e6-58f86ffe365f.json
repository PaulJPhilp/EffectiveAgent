{
  "id": "790ed9b7-2e6d-446e-89e6-58f86ffe365f",
  "sourceProfileId": "e31cb36e-b831-4aae-a397-3d5245a5ad07",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip() # Remove extra spaces\n\n        # Standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific replacements\n        company_name = company_name.replace(\"Corp.\", \"Corp.\")\n        company_name = company_name.replace(\"Inc.\", \"Inc.\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n        elif location == \"Dallas, TX\":\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_str):\n        if not date_str:\n            return date_str\n\n        date_str = date_str.strip()\n        if date_str.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_str, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_str  # Return original if parsing fails\n        except ValueError:\n            return date_str\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile:\n        for i in range(min(len(profile[\"key_skills\"]), len(normalized_profile[\"key_skills\"]))):\n            if profile[\"key_skills\"][i] != normalized_profile[\"key_skills\"][i]:\n                normalization_notes.append(f\"Standardized skill from '{profile['key_skills'][i]}' to '{normalized_profile['key_skills'][i]}'\")\n\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(min(len(profile[\"experience\"]), len(normalized_profile[\"experience\"]))):\n            if profile[\"experience\"][i].get(\"company\") != normalized_profile[\"experience\"][i].get(\"company\"):\n                normalization_notes.append(f\"Standardized company name from '{profile['experience'][i].get('company')}' to '{normalized_profile['experience'][i].get('company')}'\")\n            if profile[\"experience\"][i].get(\"title\") != normalized_profile[\"experience\"][i].get(\"title\"):\n                normalization_notes.append(f\"Standardized job title from '{profile['experience'][i].get('title')}' to '{normalized_profile['experience'][i].get('title')}'\")\n            if profile[\"experience\"][i].get(\"location\") != normalized_profile[\"experience\"][i].get(\"location\"):\n                normalization_notes.append(f\"Standardized location from '{profile['experience'][i].get('location')}' to '{normalized_profile['experience'][i].get('location')}'\")\n            if profile[\"experience\"][i].get(\"duration\", {}).get(\"start_date\") != normalized_profile[\"experience\"][i].get(\"duration\", {}).get(\"start_date\"):\n                normalization_notes.append(f\"Standardized start date from '{profile['experience'][i].get('duration', {}).get('start_date')}' to '{normalized_profile['experience'][i].get('duration', {}).get('start_date')}'\")\n            if profile[\"experience\"][i].get(\"duration\", {}).get(\"end_date\") != normalized_profile[\"experience\"][i].get(\"duration\", {}).get(\"end_date\"):\n                normalization_notes.append(f\"Standardized end date from '{profile['experience'][i].get('duration', {}).get('end_date')}' to '{normalized_profile['experience'][i].get('duration', {}).get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n\n# Example usage with the provided input profile:\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}