{
  "id": "0d8158ef-8e7b-40a7-81bb-5a9938759d29",
  "sourceProfileId": "dff3a426-dee9-43e2-8b5d-419ac2d7f406",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Handle capitalization (proper case, but preserve acronyms)\n        if company_name.isupper() and company_name not in [\"ACME\", \"LUME\"]:\n            normalized_name = company_name # Keep as is if all caps and not a known exception\n        else:\n            normalized_name = ' '.join([word.capitalize() for word in company_name.split()])\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Corp.\", \"Corp\").replace(\"Corporation\", \"Corp\")\n        normalized_name = normalized_name.replace(\"Llc\", \"LLC\").replace(\"Ltd\", \"Ltd.\")\n        normalized_name = normalized_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n        \n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n        \n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\",\", \"\") # Remove commas\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n        \n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \"New York City\" in location:\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n    \n    # Normalize key skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title: '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location: '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    \n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(len(profile[\"experience\"])):\n            if profile[\"experience\"][i].get(\"company\", \"\") != normalized_profile[\"experience\"][i].get(\"company\", \"\"):\n                normalization_notes.append(f\"Standardized company name: '{profile['experience'][i].get('company', '')}' to '{normalized_profile['experience'][i].get('company', '')}'\")\n            if profile[\"experience\"][i].get(\"title\", \"\") != normalized_profile[\"experience\"][i].get(\"title\", \"\"):\n                normalization_notes.append(f\"Standardized job title in experience: '{profile['experience'][i].get('title', '')}' to '{normalized_profile['experience'][i].get('title', '')}'\")\n            if profile[\"experience\"][i].get(\"location\", \"\") != normalized_profile[\"experience\"][i].get(\"location\", \"\"):\n                normalization_notes.append(f\"Standardized location in experience: '{profile['experience'][i].get('location', '')}' to '{normalized_profile['experience'][i].get('location', '')}'\")\n            if profile[\"experience\"][i].get(\"duration\", {}).get(\"start_date\", \"\") != normalized_profile[\"experience\"][i].get(\"duration\", {}).get(\"start_date\", \"\"):\n                normalization_notes.append(f\"Standardized start date in experience: '{profile['experience'][i].get('duration', {}).get('start_date', '')}' to '{normalized_profile['experience'][i].get('duration', {}).get('start_date', '')}'\")\n            if profile[\"experience\"][i].get(\"duration\", {}).get(\"end_date\", \"\") != normalized_profile[\"experience\"][i].get(\"duration\", {}).get(\"end_date\", \"\"):\n                normalization_notes.append(f\"Standardized end date in experience: '{profile['experience'][i].get('duration', {}).get('end_date', '')}' to '{normalized_profile['experience'][i].get('duration', {}).get('end_date', '')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```\n",
  "normalizedFields": {}
}