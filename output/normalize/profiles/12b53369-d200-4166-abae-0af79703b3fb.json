{
  "id": "12b53369-d200-4166-abae-0af79703b3fb",
  "sourceProfileId": "5c4931c8-ae25-4867-9ce7-735ba2613e6f",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): A dictionary representing the profile data.\n\n    Returns:\n        dict: A dictionary representing the normalized profile data.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"SAP\", \"AWS\", \"LUME Studios\"]:\n            company_name = company_name.title()\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n        company_name = company_name.replace(\"L. L. C.\", \"LLC\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        # Add more skill normalization rules here as needed\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string or date_string == \"Present\":\n            return \"Present\"\n\n        date_string = date_string.replace(\"Jan\", \"01\")\n        date_string = date_string.replace(\"Feb\", \"02\")\n        date_string = date_string.replace(\"Mar\", \"03\")\n        date_string = date_string.replace(\"Apr\", \"04\")\n        date_string = date_string.replace(\"May\", \"05\")\n        date_string = date_string.replace(\"Jun\", \"06\")\n        date_string = date_string.replace(\"Jul\", \"07\")\n        date_string = date_string.replace(\"Aug\", \"08\")\n        date_string = date_string.replace(\"Sep\", \"09\")\n        date_string = date_string.replace(\"Oct\", \"10\")\n        date_string = date_string.replace(\"Nov\", \"11\")\n        date_string = date_string.replace(\"Dec\", \"12\")\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            try:\n                date_object = datetime.strptime(date_string, \"%B %Y\")\n                return date_object.strftime(\"%Y-%m\")\n            except ValueError:\n                try:\n                    date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n                    return date_object.strftime(\"%Y-%m-%d\")\n                except ValueError:\n                    try:\n                        date_object = datetime.strptime(date_string, \"%m/%Y\")\n                        return date_object.strftime(\"%Y-%m\")\n                    except ValueError:\n                        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        if experience[\"duration\"][\"end_date\"] != None:\n            experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if any(s1 != s2 for s1, s2 in zip(profile[\"key_skills\"], normalized_profile[\"key_skills\"])):\n        normalization_notes.append(\"Standardized key skills\")\n    for i, (exp_orig, exp_norm) in enumerate(zip(profile[\"experience\"], normalized_profile[\"experience\"])):\n        if exp_orig[\"company\"] != exp_norm[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1} from '{exp_orig['company']}' to '{exp_norm['company']}'\")\n        if exp_orig[\"title\"] != exp_norm[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1} from '{exp_orig['title']}' to '{exp_norm['title']}'\")\n        if exp_orig[\"location\"] != exp_norm[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1} from '{exp_orig['location']}' to '{exp_norm['location']}'\")\n        if exp_orig[\"duration\"][\"start_date\"] != exp_norm[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience {i+1} from '{exp_orig['duration']['start_date']}' to '{exp_norm['duration']['start_date']}'\")\n        if exp_orig[\"duration\"][\"end_date\"] != exp_norm[\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience {i+1} from '{exp_orig['duration']['end_date']}' to '{exp_norm['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}