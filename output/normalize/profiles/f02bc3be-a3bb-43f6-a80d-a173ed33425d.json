{
  "id": "f02bc3be-a3bb-43f6-a80d-a173ed33425d",
  "sourceProfileId": "8c7830b5-3497-48ec-a601-c1a0591f8d75",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case, preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\").replace(\"Corporation\", \"Corp\")\n        company_name = company_name.replace(\"Llc.\", \"LLC\").replace(\"Limited Liability Company\", \"LLC\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if \"New York, New York\" in location:\n            location = \"New York, New York, United States\"\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if \"Present\" in date_string:\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            try:\n                date_object = datetime.strptime(date_string, \"%m/%Y\")\n                return date_object.strftime(\"%Y-%m\")\n            except ValueError:\n                return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile['title'] = normalize_job_title(normalized_profile['title'])\n    normalized_profile['location'] = normalize_location(normalized_profile['location'])\n    normalized_profile['key_skills'] = [normalize_skill(skill) for skill in normalized_profile['key_skills']]\n\n    # Normalize experience entries\n    for experience in normalized_profile['experience']:\n        experience['company'] = normalize_company_name(experience['company'])\n        experience['title'] = normalize_job_title(experience['title'])\n        experience['location'] = normalize_location(experience['location'])\n\n        experience['duration']['start_date'] = normalize_date(experience['duration']['start_date'])\n        if experience['duration']['end_date'] != \"Present\":\n            experience['duration']['end_date'] = normalize_date(experience['duration']['end_date'])\n\n    # Collect normalization notes\n    if profile['title'] != normalized_profile['title']:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile['location'] != normalized_profile['location']:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    for i, (original_skill, normalized_skill) in enumerate(zip(profile['key_skills'], normalized_profile['key_skills'])):\n        if original_skill != normalized_skill:\n            normalization_notes.append(f\"Standardized skill from '{original_skill}' to '{normalized_skill}' at index {i}\")\n    for i, (original_exp, normalized_exp) in enumerate(zip(profile['experience'], normalized_profile['experience'])):\n        if original_exp['company'] != normalized_exp['company']:\n            normalization_notes.append(f\"Standardized company name from '{original_exp['company']}' to '{normalized_exp['company']}' in experience {i}\")\n        if original_exp['title'] != normalized_exp['title']:\n            normalization_notes.append(f\"Standardized job title from '{original_exp['title']}' to '{normalized_exp['title']}' in experience {i}\")\n        if original_exp['location'] != normalized_exp['location']:\n            normalization_notes.append(f\"Standardized location from '{original_exp['location']}' to '{normalized_exp['location']}' in experience {i}\")\n        if original_exp['duration']['start_date'] != normalized_exp['duration']['start_date']:\n            normalization_notes.append(f\"Standardized start date from '{original_exp['duration']['start_date']}' to '{normalized_exp['duration']['start_date']}' in experience {i}\")\n        if original_exp['duration']['end_date'] != normalized_exp['duration']['end_date']:\n            normalization_notes.append(f\"Standardized end date from '{original_exp['duration']['end_date']}' to '{normalized_exp['duration']['end_date']}' in experience {i}\")\n\n    if normalization_notes:\n        normalized_profile['normalization_notes'] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}