{
  "id": "742e119c-b7ea-44cb-aa92-9dd133196cb5",
  "sourceProfileId": "cb76c0c3-6934-4875-92af-985aedef4859",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"AT&T\"]:\n            company_name = company_name.title()\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager, \" in job_title:\n            job_title_parts = job_title.split(\", \")\n            job_title = f\"{job_title_parts[1]} {job_title_parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"New York City\", \"New York, New York\")\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return the original string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n            experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n            experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n            if \"duration\" in experience:\n                duration = experience[\"duration\"]\n                duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n                duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and normalized_profile[\"key_skills\"] != profile[\"key_skills\"]:\n        normalization_notes.append(\"Standardized key skills\")\n    if \"experience\" in profile:\n        for i, (normalized_exp, original_exp) in enumerate(zip(normalized_profile[\"experience\"], profile[\"experience\"])):\n            if normalized_exp.get(\"company\", \"\") != original_exp.get(\"company\", \"\"):\n                normalization_notes.append(f\"Standardized company name in experience {i+1} from '{original_exp.get('company', '')}' to '{normalized_exp.get('company', '')}'\")\n            if normalized_exp.get(\"title\", \"\") != original_exp.get(\"title\", \"\"):\n                normalization_notes.append(f\"Standardized job title in experience {i+1} from '{original_exp.get('title', '')}' to '{normalized_exp.get('title', '')}'\")\n            if normalized_exp.get(\"location\", \"\") != original_exp.get(\"location\", \"\"):\n                normalization_notes.append(f\"Standardized location in experience {i+1} from '{original_exp.get('location', '')}' to '{normalized_exp.get('location', '')}'\")\n            if normalized_exp[\"duration\"].get(\"start_date\", \"\") != original_exp[\"duration\"].get(\"start_date\", \"\"):\n                normalization_notes.append(f\"Standardized start date in experience {i+1} from '{original_exp['duration'].get('start_date', '')}' to '{normalized_exp['duration'].get('start_date', '')}'\")\n            if normalized_exp[\"duration\"].get(\"end_date\", \"\") != original_exp[\"duration\"].get(\"end_date\", \"\"):\n                normalization_notes.append(f\"Standardized end date in experience {i+1} from '{original_exp['duration'].get('end_date', '')}' to '{normalized_exp['duration'].get('end_date', '')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}