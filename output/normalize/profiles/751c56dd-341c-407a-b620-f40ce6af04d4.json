{
  "id": "751c56dd-341c-407a-b620-f40ce6af04d4",
  "sourceProfileId": "4623f728-9ebb-4a1a-adfb-a22a45ad872f",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Common replacements\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"LLC.\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n\n\n        if company_name.upper() == company_name and company_name not in [\"LLC\", \"IBM\", \"SAP\", \"AWS\", \"GmbH\"]:\n            # Attempt proper case if it was all caps and not a known acronym\n            company_name = company_name.title()\n        elif company_name.lower() == company_name:\n            company_name = company_name.title()\n\n        if company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize capitalization\n        job_title = job_title.title()\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n\n        if skill.lower() == \"salesforce.com\":\n            return \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            return \"Digital Marketing\"\n        elif skill.lower() in [\"class management\", \"classroom mgmt\"]:\n            return \"Classroom Management\"\n        # Add more skill normalization rules here\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n\n        if \",\" in location:\n            parts = [p.strip() for p in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"TX\":\n                    return f\"{city}, Texas, United States\"\n                elif state == \"New York\":\n                    return f\"{city}, New York, United States\"\n                else:\n                    return f\"{city}, {state}, United States\" # Assume US if only city and state\n            elif len(parts) == 3:\n                return \", \".join(parts) # Assume already in correct format\n        elif \"Area\" in location:\n            location = location.replace(\" Area\", \"\")\n            return f\"{location}, United States\"\n        else:\n            return f\"{location}, United States\"\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Sept\", \"Sep\") # Standardize abbreviation\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n            return date_object.strftime(\"%Y-%m-%d\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    for experience in normalized_profile[\"experience\"]:\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Add normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: {profile['title']} -> {normalized_profile['title']}\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: {profile['location']} -> {normalized_profile['location']}\")\n\n    if any(normalized_profile[\"key_skills\"][i] != profile[\"key_skills\"][i] for i in range(len(normalized_profile[\"key_skills\"]))):\n        normalization_notes.append(\"Standardized key skills\")\n\n    for i, exp in enumerate(profile[\"experience\"]):\n        if normalized_profile[\"experience\"][i][\"company\"] != exp[\"company\"]:\n            normalization_notes.append(f\"Standardized company name: {exp['company']} -> {normalized_profile['experience'][i]['company']}\")\n        if normalized_profile[\"experience\"][i][\"title\"] != exp[\"title\"]:\n            normalization_notes.append(f\"Standardized job title: {exp['title']} -> {normalized_profile['experience'][i]['title']}\")\n        if normalized_profile[\"experience\"][i][\"location\"] != exp[\"location\"]:\n            normalization_notes.append(f\"Standardized location: {exp['location']} -> {normalized_profile['experience'][i]['location']}\")\n        if normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"] != exp[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date: {exp['duration']['start_date']} -> {normalized_profile['experience'][i]['duration']['start_date']}\")\n        if normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"] != exp[\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date: {exp['duration']['end_date']} -> {normalized_profile['experience'][i]['duration']['end_date']}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}