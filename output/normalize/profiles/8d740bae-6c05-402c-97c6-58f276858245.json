{
  "id": "8d740bae-6c05-402c-97c6-58f276858245",
  "sourceProfileId": "82325b9a-e041-4dac-a6d8-a76a4957a223",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the given guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n\n        # Standardize capitalization\n        if company_name.upper() != company_name and company_name.lower() != company_name:\n            company_name = company_name.title()\n\n        # Specific company name normalizations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Corp.\", \"Corp\")\n        if company_name == \"Self Employed\" or company_name == \"Self-employed\":\n            company_name = \"Self-Employed\"\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Mgr\", \"Manager\").replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill == \"Salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill == \"Digital Mktg\":\n            skill = \"Digital Marketing\"\n        elif skill == \"Class Management\":\n            skill = \"Classroom Management\"\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \"New York City\" in location:\n            location = \"New York, New York, United States\"\n            \n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    continue\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return the original string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile['title'] = normalize_job_title(normalized_profile['title'])\n    normalized_profile['location'] = normalize_location(normalized_profile['location'])\n\n    # Normalize skills\n    normalized_profile['key_skills'] = [normalize_skill(skill) for skill in normalized_profile['key_skills']]\n\n    # Normalize experience\n    for experience in normalized_profile['experience']:\n        experience['company'] = normalize_company_name(experience['company'])\n        experience['title'] = normalize_job_title(experience['title'])\n        experience['location'] = normalize_location(experience['location'])\n\n        # Normalize dates\n        experience['duration']['start_date'] = normalize_date(experience['duration']['start_date'])\n        if experience['duration']['end_date']:\n            experience['duration']['end_date'] = normalize_date(experience['duration']['end_date'])\n\n    # Add normalization notes\n    if normalized_profile['title'] != profile['title']:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if normalized_profile['location'] != profile['location']:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if normalized_profile['key_skills'] != profile['key_skills']:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    for i in range(len(normalized_profile['experience'])):\n        if normalized_profile['experience'][i]['company'] != profile['experience'][i]['company']:\n            normalization_notes.append(f\"Standardized company name from '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n        if normalized_profile['experience'][i]['title'] != profile['experience'][i]['title']:\n            normalization_notes.append(f\"Standardized job title in experience from '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n        if normalized_profile['experience'][i]['location'] != profile['experience'][i]['location']:\n            normalization_notes.append(f\"Standardized location in experience from '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n        if normalized_profile['experience'][i]['duration']['start_date'] != profile['experience'][i]['duration']['start_date']:\n            normalization_notes.append(f\"Standardized start date in experience from '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n        if normalized_profile['experience'][i]['duration']['end_date'] != profile['experience'][i]['duration']['end_date']:\n            normalization_notes.append(f\"Standardized end date in experience from '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile['normalization_notes'] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}