{
  "id": "2a7183d5-586f-401c-b3de-8a6f0d05401e",
  "sourceProfileId": "de18f481-5077-406e-8256-6d1f0444a8c9",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Handle capitalization (proper case, but preserve acronyms)\n        if company_name.isupper() and len(company_name) > 3:\n            normalized_name = company_name # Assume it's an acronym\n        else:\n            normalized_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Incorporated\", \"Inc\")\n        normalized_name = normalized_name.replace(\"Llc\", \"LLC\")\n        normalized_name = normalized_name.replace(\"L.l.c.\", \"LLC\")\n        normalized_name = normalized_name.replace(\"L.l.c\", \"LLC\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n        normalized_name = normalized_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if location == \"New York, New York\":\n            return \"New York, New York, United States\"\n        if location == \"Dallas, TX\":\n            return \"Dallas, Texas, United States\"\n        if \"Austin, Texas Area\" in location:\n            return \"Austin, Texas, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string  # Return original if parsing fails\n\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience entries\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n        experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n        experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n        if \"duration\" in experience:\n            duration = experience[\"duration\"]\n            duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n            duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    \n    for i, (original_exp, normalized_exp) in enumerate(zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        if original_exp.get(\"company\") != normalized_exp.get(\"company\"):\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: '{original_exp.get('company')}' to '{normalized_exp.get('company')}'\")\n        if original_exp.get(\"title\") != normalized_exp.get(\"title\"):\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: '{original_exp.get('title')}' to '{normalized_exp.get('title')}'\")\n        if original_exp.get(\"location\") != normalized_exp.get(\"location\"):\n            normalization_notes.append(f\"Standardized location in experience {i+1}: '{original_exp.get('location')}' to '{normalized_exp.get('location')}'\")\n        if original_exp.get(\"duration\", {}).get(\"start_date\") != normalized_exp.get(\"duration\", {}).get(\"start_date\"):\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: '{original_exp.get('duration', {}).get('start_date')}' to '{normalized_exp.get('duration', {}).get('start_date')}'\")\n        if original_exp.get(\"duration\", {}).get(\"end_date\") != normalized_exp.get(\"duration\", {}).get(\"end_date\"):\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: '{original_exp.get('duration', {}).get('end_date')}' to '{normalized_exp.get('duration', {}).get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n# Example Usage (replace with actual input)\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}