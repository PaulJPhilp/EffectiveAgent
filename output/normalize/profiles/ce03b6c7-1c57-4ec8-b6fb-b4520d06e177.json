{
  "id": "ce03b6c7-1c57-4ec8-b6fb-b4520d06e177",
  "sourceProfileId": "09517cde-d085-49ec-a766-ba10d458023d",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip() # Remove extra spaces\n\n        # Standard capitalization (proper case)\n        company_name = ' '.join([word.capitalize() if word.lower() != 'inc' else 'Inc' for word in company_name.split()])\n\n        # Specific normalizations\n        company_name = company_name.replace(\"Inc.\", \"Inc\")\n        company_name = company_name.replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\") #Preserve all caps\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return the original string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n\n    if \"location\" in normalized_profile:\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                original_company = exp[\"company\"]\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n                if original_company != exp[\"company\"]:\n                    normalization_notes.append(f\"Company name normalized from '{original_company}' to '{exp['company']}'\")\n\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    original_start_date = exp[\"duration\"][\"start_date\"]\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                    if original_start_date != exp[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Start date normalized from '{original_start_date}' to '{exp['duration']['start_date']}'\")\n\n                if \"end_date\" in exp[\"duration\"]:\n                    original_end_date = exp[\"duration\"][\"end_date\"]\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n                    if original_end_date != exp[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"End date normalized from '{original_end_date}' to '{exp['duration']['end_date']}'\")\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}