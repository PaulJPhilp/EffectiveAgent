{
  "id": "b4d5b913-c99b-4902-8fa7-f7362e3b840a",
  "sourceProfileId": "055c4fdd-d890-4d4e-8d53-a65b966c65cf",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('Inc.', 'Incorporated')\n        company_name = company_name.replace('&', 'and')\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"GE\", \"AT&T\"]:\n            company_name = company_name.title()\n        elif company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n        elif company_name == \"FleishmanHillard\":\n            company_name = \"Fleishman-Hillard\"\n        elif company_name == \"LUME studios\":\n            company_name = \"LUME Studios\"\n        else:\n            company_name = ' '.join([word.capitalize() if word.lower() != 'llc' else 'LLC' for word in company_name.split()])\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and \"Manager\" in parts[1]:\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill == \"Salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill in [\"Digital Mktg\", \"Digital Marketing\"]:\n            skill = \"Digital Marketing\"\n        elif skill in [\"Classroom Management\", \"Class Management\"]:\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Sept\", \"Sep\")\n        date_string = date_string.replace(\"Okt\", \"Oct\")\n        date_string = date_string.replace(\"Dez\", \"Dec\")\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if \"title\" in experience:\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n            if \"location\" in experience:\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if \"end_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(len(profile[\"experience\"])):\n            if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                normalization_notes.append(f\"Standardized company name from '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if profile[\"experience\"][i][\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n                normalization_notes.append(f\"Standardized job title from '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n            if profile[\"experience\"][i][\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n                normalization_notes.append(f\"Standardized location from '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                normalization_notes.append(f\"Standardized start date from '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date from '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}