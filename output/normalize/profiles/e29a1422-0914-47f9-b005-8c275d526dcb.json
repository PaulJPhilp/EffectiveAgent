{
  "id": "e29a1422-0914-47f9-b005-8c275d526dcb",
  "sourceProfileId": "6faff8cf-b3aa-441b-993e-9aa713bc5cda",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Normalize Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip() #remove extra spaces\n        \n        # Handle specific cases\n        if company_name.upper() == \"CHANEL\":\n            company_name = \"Chanel\"\n        elif company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n        elif company_name == \"FleishmanHillard\":\n            company_name = \"Fleishman-Hillard\"\n        elif company_name == \"LUME studios\":\n            company_name = \"LUME Studios\"\n        \n        # Standardize Inc. vs Incorporated\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n\n        # Proper case capitalization (except for known acronyms)\n        words = []\n        for word in company_name.split():\n            if word.isupper() and len(word) > 1: #Preserve acronyms\n                words.append(word)\n            else:\n                words.append(word.capitalize())\n        company_name = \" \".join(words)\n\n        return company_name\n\n    # 2. Normalize Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\",\", \"\")\n\n        # Standardize Marketing titles\n        if \"Marketing Mgr\" in job_title:\n            job_title = job_title.replace(\"Marketing Mgr\", \"Marketing Manager\")\n        if \"Mktg Manager\" in job_title:\n            job_title = job_title.replace(\"Mktg Manager\", \"Marketing Manager\")\n        \n        return job_title\n\n    # 3. Normalize Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Normalize Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        if location == \"NYC, New York\":\n            location = \"New York, New York, United States\"\n        elif location == \"Dallas, TX\":\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        elif location == \"New York City\":\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Normalize Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            formats = [\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"]\n            for fmt in formats:\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n\n    if \"location\" in normalized_profile:\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                original_company = exp[\"company\"]\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n                if original_company != exp[\"company\"]:\n                    normalization_notes.append(f\"Company name normalized from '{original_company}' to '{exp['company']}'\")\n\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    original_start_date = exp[\"duration\"][\"start_date\"]\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                    if original_start_date != exp[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Start date normalized from '{original_start_date}' to '{exp['duration']['start_date']}'\")\n\n                if \"end_date\" in exp[\"duration\"]:\n                    original_end_date = exp[\"duration\"][\"end_date\"]\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n                    if original_end_date != exp[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"End date normalized from '{original_end_date}' to '{exp['duration']['end_date']}'\")\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}