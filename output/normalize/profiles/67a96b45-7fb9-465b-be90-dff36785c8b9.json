{
  "id": "67a96b45-7fb9-465b-be90-dff36785c8b9",
  "sourceProfileId": "3106f160-c9cf-4e82-9ef9-0c5596035e88",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Common replacements\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"LLC.\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n\n        if company_name.upper() == company_name and company_name not in [\"LLC\", \"IBM\", \"AWS\", \"SAP\"]:\n            # Attempt proper case conversion, but preserve acronyms\n            company_name = company_name.title()\n        else:\n            company_name = company_name[0].upper() + company_name[1:] # Proper case first letter\n\n        if company_name == \"Self Employed\" or company_name == \"Self-employed\":\n            company_name = \"Self-Employed\"\n\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill == \"Salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill == \"Digital Mktg\":\n            skill = \"Digital Marketing\"\n        elif skill == \"Class Management\":\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_str):\n        if not date_str:\n            return date_str\n\n        if date_str.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_obj = datetime.strptime(date_str, \"%B %Y\")\n            return date_obj.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_obj = datetime.strptime(date_str, \"%m/%Y\")\n            return date_obj.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_str  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                original_company = exp[\"company\"]\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n                if original_company != exp[\"company\"]:\n                    normalization_notes.append(f\"Company name normalized from '{original_company}' to '{exp['company']}'\")\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Add normalization notes\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}