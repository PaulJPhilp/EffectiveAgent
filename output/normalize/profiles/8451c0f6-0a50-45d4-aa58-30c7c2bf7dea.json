{
  "id": "8451c0f6-0a50-45d4-aa58-30c7c2bf7dea",
  "sourceProfileId": "00a8d4dc-63ad-4a54-8705-120a823020df",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case, but preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager, \" in job_title:\n            parts = job_title.split(\", \")\n            job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"New York City\", \"New York, New York\")\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience entries\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n        experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n        experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n        if \"duration\" in experience:\n            duration = experience[\"duration\"]\n            duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n            duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: {profile['title']} to {normalized_profile['title']}\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: {profile['location']} to {normalized_profile['location']}\")\n    if normalized_profile[\"key_skills\"] != profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: {profile['key_skills']} to {normalized_profile['key_skills']}\")\n    for i, (old_exp, new_exp) in enumerate(zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        if new_exp[\"company\"] != old_exp[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: {old_exp['company']} to {new_exp['company']}\")\n        if new_exp[\"title\"] != old_exp[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: {old_exp['title']} to {new_exp['title']}\")\n        if new_exp[\"location\"] != old_exp[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1}: {old_exp['location']} to {new_exp['location']}\")\n        if new_exp[\"duration\"][\"start_date\"] != old_exp[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: {old_exp['duration']['start_date']} to {new_exp['duration']['start_date']}\")\n        if new_exp[\"duration\"][\"end_date\"] != old_exp[\"duration\"][\"end_date\"]:\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: {old_exp['duration']['end_date']} to {new_exp['duration']['end_date']}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}