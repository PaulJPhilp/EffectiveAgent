{
  "id": "555e9e4d-3ef3-4a48-8aa4-7a9afe3c60d1",
  "sourceProfileId": "79841f5e-7a8c-452b-bd9b-270c66007e6e",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('Inc.', 'Incorporated')\n        company_name = company_name.replace('&', 'and')\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"GE\", \"AT&T\"]:\n            company_name = company_name.title()\n        elif company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n        elif company_name == \"FleishmanHillard\":\n            company_name = \"Fleishman-Hillard\"\n        elif company_name == \"LUME studios\":\n            company_name = \"LUME Studios\"\n        else:\n            company_name = ' '.join([word.capitalize() if word.lower() != 'llc' else word.upper() for word in company_name.split()])\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and normalized_profile[\"key_skills\"] != profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile:\n        for i, exp in enumerate(profile[\"experience\"]):\n            if \"company\" in exp and normalized_profile[\"experience\"][i][\"company\"] != exp[\"company\"]:\n                normalization_notes.append(f\"Standardized company name from '{exp['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if \"title\" in exp and normalized_profile[\"experience\"][i][\"title\"] != exp[\"title\"]:\n                normalization_notes.append(f\"Standardized job title in experience from '{exp['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n            if \"location\" in exp and normalized_profile[\"experience\"][i][\"location\"] != exp[\"location\"]:\n                normalization_notes.append(f\"Standardized location in experience from '{exp['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"] and normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"] != exp[\"duration\"][\"start_date\"]:\n                    normalization_notes.append(f\"Standardized start date in experience from '{exp['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n                if \"end_date\" in exp[\"duration\"] and normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"] != exp[\"duration\"][\"end_date\"]:\n                    normalization_notes.append(f\"Standardized end date in experience from '{exp['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}