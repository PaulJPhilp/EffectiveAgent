{
  "id": "37feacb9-09fc-4ef7-991d-21e22db6673e",
  "sourceProfileId": "c736a37b-721b-40c7-a6f5-740421df1ba4",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n\n        # Standardize capitalization (proper case, preserve acronyms)\n        if company_name.isupper() and company_name not in [\"ACME\", \"LUME\"]: # Add exceptions here\n            normalized_name = company_name # Keep as is\n        else:\n            normalized_name = ' '.join([word.capitalize() if word.lower() not in [\"inc\", \"llc\", \"corp\", \"ltd\"] else word.upper() if word.lower() in [\"inc\", \"llc\", \"corp\", \"ltd\"] else word.capitalize() for word in company_name.split()])\n\n        # Standardize common variations\n        normalized_name = normalized_name.replace(\"Inc.\", \"Incorporated\")\n        normalized_name = normalized_name.replace(\"Corp.\", \"Corp\")\n        normalized_name = normalized_name.replace(\"Llc.\", \"LLC\")\n        normalized_name = normalized_name.replace(\"Ltd.\", \"Ltd\")\n        normalized_name = normalized_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        normalized_name = normalized_name.replace(\"Self Employed\", \"Self-Employed\")\n        normalized_name = normalized_name.replace(\"Self employed\", \"Self-Employed\")\n        normalized_name = normalized_name.replace(\"Self-employed\", \"Self-Employed\")\n\n\n        return normalized_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if location == \"New York, New York\":\n            return \"New York, New York, United States\"\n        if location == \"Dallas, TX\":\n            return \"Dallas, Texas, United States\"\n        if \"Austin, Texas Area\" in location:\n            return \"Austin, Texas, United States\"\n        if location == \"New York City\":\n            return \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        try:\n            if \"Present\" in date_string:\n                return \"Present\"\n            if re.match(r\"^\\d{2}/\\d{4}$\", date_string):\n                date_object = datetime.strptime(date_string, \"%m/%Y\")\n                return date_object.strftime(\"%Y-%m\")\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n\n    if \"location\" in normalized_profile:\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                original_company = exp[\"company\"]\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n                if original_company != exp[\"company\"]:\n                    normalization_notes.append(f\"Company name normalized from '{original_company}' to '{exp['company']}'\")\n\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    original_start_date = exp[\"duration\"][\"start_date\"]\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                    if original_start_date != exp[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Start date normalized from '{original_start_date}' to '{exp['duration']['start_date']}'\")\n\n                if \"end_date\" in exp[\"duration\"]:\n                    original_end_date = exp[\"duration\"][\"end_date\"]\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n                    if original_end_date != exp[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"End date normalized from '{original_end_date}' to '{exp['duration']['end_date']}'\")\n\n    # Add normalization notes\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Location normalized from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Title normalized from '{profile['title']}' to '{normalized_profile['title']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}