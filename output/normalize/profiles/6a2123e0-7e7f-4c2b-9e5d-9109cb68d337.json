{
  "id": "6a2123e0-7e7f-4c2b-9e5d-9109cb68d337",
  "sourceProfileId": "bd3f317f-0761-4833-b426-00865b70233f",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"SAP\", \"AWS\", \"LUME Studios\"]:\n            company_name = company_name.title()\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \"Manager\" in job_title and \",\" in job_title:\n            parts = [s.strip() for s in job_title.split(\",\")]\n            if len(parts) == 2 and parts[1] == \"Manager\":\n                job_title = f\"{parts[0]} Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        elif skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        elif skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \",\" in location:\n            parts = [s.strip() for s in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"TX\":\n                    location = f\"{city}, Texas, United States\"\n                elif state == \"New York\":\n                    location = f\"{city}, New York, United States\"\n                else:\n                    location = f\"{city}, {state}, United States\"\n            elif len(parts) == 3:\n                location = \", \".join(parts)\n        elif \"Area\" in location:\n            location = location.replace(\" Area\", \", United States\")\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(len(profile[\"experience\"])):\n            if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                normalization_notes.append(f\"Standardized company name: '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if profile[\"experience\"][i][\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n                normalization_notes.append(f\"Standardized job title in experience: '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}'\")\n            if profile[\"experience\"][i][\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n                normalization_notes.append(f\"Standardized location in experience: '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                normalization_notes.append(f\"Standardized start date in experience: '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}'\")\n            if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date in experience: '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}