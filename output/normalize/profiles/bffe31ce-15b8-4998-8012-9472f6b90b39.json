{
  "id": "bffe31ce-15b8-4998-8012-9472f6b90b39",
  "sourceProfileId": "0e38a3a2-a322-4c9f-8ed9-ef9848f9fef5",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case, preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\").replace(\"Corporation\", \"Corp\")\n        company_name = company_name.replace(\"Llc.\", \"LLC\").replace(\"Limited Liability Company\", \"LLC\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n        elif \"Dallas, TX\" in location:\n            location = \"Dallas, Texas, United States\"\n        elif \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\").replace(\"Feb\", \"February\").replace(\"Mar\", \"March\").replace(\"Apr\", \"April\").replace(\"May\", \"May\").replace(\"Jun\", \"June\").replace(\"Jul\", \"July\").replace(\"Aug\", \"August\").replace(\"Sep\", \"September\").replace(\"Oct\", \"October\").replace(\"Nov\", \"November\").replace(\"Dec\", \"December\")\n\n        if \"Present\" in date_string:\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        original_title = normalized_profile[\"title\"]\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n        if original_title != normalized_profile[\"title\"]:\n            normalization_notes.append(f\"Standardized job title from '{original_title}' to '{normalized_profile['title']}'\")\n\n    if \"location\" in normalized_profile:\n        original_location = normalized_profile[\"location\"]\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n        if original_location != normalized_profile[\"location\"]:\n            normalization_notes.append(f\"Standardized location from '{original_location}' to '{normalized_profile['location']}'\")\n\n    if \"key_skills\" in normalized_profile:\n        original_skills = normalized_profile[\"key_skills\"]\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n        if original_skills != normalized_profile[\"key_skills\"]:\n            normalization_notes.append(f\"Standardized skills from '{original_skills}' to '{normalized_profile['key_skills']}'\")\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                original_company = experience[\"company\"]\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n                if original_company != experience[\"company\"]:\n                    normalization_notes.append(f\"Standardized company name from '{original_company}' to '{experience['company']}'\")\n\n            if \"title\" in experience:\n                original_title = experience[\"title\"]\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n                if original_title != experience[\"title\"]:\n                    normalization_notes.append(f\"Standardized job title from '{original_title}' to '{experience['title']}' in experience\")\n\n            if \"location\" in experience:\n                original_location = experience[\"location\"]\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n                if original_location != experience[\"location\"]:\n                    normalization_notes.append(f\"Standardized location from '{original_location}' to '{experience['location']}' in experience\")\n\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    original_start_date = experience[\"duration\"][\"start_date\"]\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                    if original_start_date != experience[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Standardized start date from '{original_start_date}' to '{experience['duration']['start_date']}' in experience\")\n\n                if \"end_date\" in experience[\"duration\"]:\n                    original_end_date = experience[\"duration\"][\"end_date\"]\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n                    if original_end_date != experience[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"Standardized end date from '{original_end_date}' to '{experience['duration']['end_date']}' in experience\")\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}