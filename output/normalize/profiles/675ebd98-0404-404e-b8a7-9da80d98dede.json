{
  "id": "675ebd98-0404-404e-b8a7-9da80d98dede",
  "sourceProfileId": "9d000836-326e-45a7-a40c-1775c9cf8c7a",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Handle common variations and capitalization\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"LLC.\", \"LLC\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n        company_name = company_name.replace(\"L. L. C.\", \"LLC\")\n        company_name = company_name.replace(\"Co.\", \"Company\")\n        company_name = company_name.replace(\" & \", \" & \")\n        company_name = company_name.replace(\" - \", \" - \")\n        \n        if company_name.upper() != company_name and company_name.lower() != company_name:\n            company_name = ' '.join([word.capitalize() for word in company_name.split()])\n        \n        if company_name.lower() == \"self-employed\":\n            company_name = \"Self-Employed\"\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n        if company_name == \"Accenture Llp\":\n            company_name = \"Accenture LLP\"\n        \n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Asst.\", \"Assistant\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n        \n        # Standardize Marketing titles\n        if \"Manager, Marketing\" in job_title:\n            job_title = \"Marketing Manager\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        if skill.lower() == \"salesforce.com\":\n            skill = \"Salesforce\"\n        if skill.lower() == \"digital mktg\":\n            skill = \"Digital Marketing\"\n        if skill.lower() == \"class management\":\n            skill = \"Classroom Management\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \"New York City\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience entries\n    for experience in normalized_profile.get(\"experience\", []):\n        if \"company\" in experience:\n            original_company = experience[\"company\"]\n            experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if original_company != experience[\"company\"]:\n                normalization_notes.append(f\"Company name normalized from '{original_company}' to '{experience['company']}'\")\n\n        if \"title\" in experience:\n            experience[\"title\"] = normalize_job_title(experience[\"title\"])\n\n        if \"location\" in experience:\n            original_location = experience[\"location\"]\n            experience[\"location\"] = normalize_location(experience[\"location\"])\n            if original_location != experience[\"location\"]:\n                normalization_notes.append(f\"Location normalized from '{original_location}' to '{experience['location']}'\")\n\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                original_start_date = experience[\"duration\"][\"start_date\"]\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if original_start_date != experience[\"duration\"][\"start_date\"]:\n                    normalization_notes.append(f\"Start date normalized from '{original_start_date}' to '{experience['duration']['start_date']}'\")\n            if \"end_date\" in experience[\"duration\"]:\n                original_end_date = experience[\"duration\"][\"end_date\"]\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n                if original_end_date != experience[\"duration\"][\"end_date\"]:\n                    normalization_notes.append(f\"End date normalized from '{original_end_date}' to '{experience['duration']['end_date']}'\")\n\n    # Add normalization notes if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}