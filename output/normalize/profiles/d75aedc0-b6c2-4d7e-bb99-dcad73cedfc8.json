{
  "id": "d75aedc0-b6c2-4d7e-bb99-dcad73cedfc8",
  "sourceProfileId": "204fa8c5-aa58-4383-9a9b-56a5dac791e1",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('Incorporated', 'Inc.')\n        company_name = company_name.replace('Limited', 'Ltd.')\n\n        if company_name.upper() == company_name and company_name not in [\"ACME\", \"LUME\"]:\n            # If all caps and not a known exception, convert to title case\n            company_name = company_name.title()\n        else:\n            # Otherwise, convert to title case, but preserve acronyms\n            words = company_name.split()\n            normalized_words = []\n            for word in words:\n                if word.isupper() and len(word) <= 4:\n                    normalized_words.append(word)\n                else:\n                    normalized_words.append(word.title())\n            company_name = \" \".join(normalized_words)\n\n        if company_name == \"Self Employed\":\n            company_name = \"Self-Employed\"\n        if company_name == \"Fleishmanhillard\":\n            company_name = \"Fleishman-Hillard\"\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize capitalization\n        words = job_title.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) <= 4:\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.title())\n        job_title = \" \".join(normalized_words)\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.title()\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        if \",\" in location:\n            parts = [s.strip() for s in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"TX\":\n                    state = \"Texas\"\n                if state == \"New York\":\n                    location = f\"{city}, {state}, United States\"\n                elif state == \"Texas\":\n                    location = f\"{city}, {state}, United States\"\n                else:\n                    location = f\"{city}, {state}\" # Keep original if state not recognized\n            elif len(parts) == 3:\n                # Assuming City, State, Country format\n                pass # Already in desired format\n            else:\n                pass # Keep original if format not recognized\n        else:\n            pass # Keep original if no comma\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n\n    if \"location\" in normalized_profile:\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if \"title\" in experience:\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n            if \"location\" in experience:\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if \"end_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile:\n        for i in range(min(len(profile[\"key_skills\"]), len(normalized_profile[\"key_skills\"]))):\n            if profile[\"key_skills\"][i] != normalized_profile[\"key_skills\"][i]:\n                normalization_notes.append(f\"Standardized skill from '{profile['key_skills'][i]}' to '{normalized_profile['key_skills'][i]}'\")\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(len(profile[\"experience\"])):\n            if profile[\"experience\"][i][\"company\"] != normalized_profile[\"experience\"][i][\"company\"]:\n                normalization_notes.append(f\"Standardized company name from '{profile['experience'][i]['company']}' to '{normalized_profile['experience'][i]['company']}'\")\n            if profile[\"experience\"][i][\"title\"] != normalized_profile[\"experience\"][i][\"title\"]:\n                normalization_notes.append(f\"Standardized job title from '{profile['experience'][i]['title']}' to '{normalized_profile['experience'][i]['title']}' in experience {i+1}\")\n            if profile[\"experience\"][i][\"location\"] != normalized_profile[\"experience\"][i][\"location\"]:\n                normalization_notes.append(f\"Standardized location from '{profile['experience'][i]['location']}' to '{normalized_profile['experience'][i]['location']}' in experience {i+1}\")\n            if profile[\"experience\"][i][\"duration\"][\"start_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"start_date\"]:\n                normalization_notes.append(f\"Standardized start date from '{profile['experience'][i]['duration']['start_date']}' to '{normalized_profile['experience'][i]['duration']['start_date']}' in experience {i+1}\")\n            if profile[\"experience\"][i][\"duration\"][\"end_date\"] != normalized_profile[\"experience\"][i][\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date from '{profile['experience'][i]['duration']['end_date']}' to '{normalized_profile['experience'][i]['duration']['end_date']}' in experience {i+1}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}