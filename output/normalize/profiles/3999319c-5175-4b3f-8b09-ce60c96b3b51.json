{
  "id": "3999319c-5175-4b3f-8b09-ce60c96b3b51",
  "sourceProfileId": "4ea8e5da-309d-47b3-8e15-70b6d2bef657",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Remove extra spaces\n        company_name = company_name.replace('â€™', \"'\") # Standardize apostrophes\n\n        # Apply standard capitalization (proper case)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and word not in [\"ACME\", \"LUME\"]:  # Preserve well-known acronyms (example)\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\").replace(\"Ltd.\", \"Ltd\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and \"Manager\" in parts[1]:\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        # Example of categorizing strategy skills (can be expanded)\n        if \"Strategy\" in skill and skill != \"Strategy\":\n            skill = skill  # Keep specificity, but could add to a taxonomy\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        if \",\" in location:\n            parts = location.split(\",\")\n            if len(parts) == 2:\n                city = parts[0].strip()\n                state = parts[1].strip()\n                if state == \"New York\":\n                    location = f\"{city}, {state}, United States\"\n                elif state == \"TX\":\n                    location = f\"{city}, Texas, United States\"\n                else:\n                    location = f\"{city}, {state}, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_str):\n        if not date_str:\n            return date_str\n\n        date_str = date_str.strip()\n        if date_str.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_obj = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_obj = datetime.strptime(date_str, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_str  # Return original if parsing fails\n        except ValueError:\n            return date_str\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title: '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location: '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in normalized_profile and normalized_profile[\"key_skills\"] != profile.get(\"key_skills\", []):\n        normalization_notes.append(f\"Standardized skills: '{profile.get('key_skills', [])}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in normalized_profile:\n        for i, exp in enumerate(normalized_profile[\"experience\"]):\n            if exp.get(\"company\", \"\") != profile.get(\"experience\", [{}])[i].get(\"company\", \"\"):\n                normalization_notes.append(f\"Standardized company name: '{profile.get('experience', [{}])[i].get('company', '')}' to '{exp.get('company', '')}'\")\n            if exp.get(\"title\", \"\") != profile.get(\"experience\", [{}])[i].get(\"title\", \"\"):\n                normalization_notes.append(f\"Standardized job title in experience: '{profile.get('experience', [{}])[i].get('title', '')}' to '{exp.get('title', '')}'\")\n            if exp.get(\"location\", \"\") != profile.get(\"experience\", [{}])[i].get(\"location\", \"\"):\n                normalization_notes.append(f\"Standardized location in experience: '{profile.get('experience', [{}])[i].get('location', '')}' to '{exp.get('location', '')}'\")\n            if exp.get(\"duration\", {}).get(\"start_date\", \"\") != profile.get(\"experience\", [{}])[i].get(\"duration\", {}).get(\"start_date\", \"\"):\n                normalization_notes.append(f\"Standardized start date in experience: '{profile.get('experience', [{}])[i].get('duration', {}).get('start_date', '')}' to '{exp.get('duration', {}).get('start_date', '')}'\")\n            if exp.get(\"duration\", {}).get(\"end_date\", \"\") != profile.get(\"experience\", [{}])[i].get(\"duration\", {}).get(\"end_date\", \"\"):\n                normalization_notes.append(f\"Standardized end date in experience: '{profile.get('experience', [{}])[i].get('duration', {}).get('end_date', '')}' to '{exp.get('duration', {}).get('end_date', '')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n\n# Example Usage (replace with your actual input)\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}