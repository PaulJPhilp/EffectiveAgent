{
  "id": "e465c3c6-92d6-44da-bdc5-45e7bc1e8a41",
  "sourceProfileId": "fa61057a-29b9-4684-936b-2cad73034eef",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Common replacements\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Co.\", \"Company\")\n\n        if company_name.upper() == \"CHANEL\":\n            return \"Chanel\"\n        if company_name.lower() == \"self-employed\":\n            return \"Self-Employed\"\n        if company_name == \"FleishmanHillard\":\n            return \"Fleishman-Hillard\"\n        if company_name == \"LUME studios\":\n            return \"LUME Studios\"\n\n        # Proper case capitalization (handles acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        return \" \".join(normalized_words)\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        if skill.lower() == \"salesforce.com\":\n            return \"Salesforce\"\n        if skill.lower() in [\"class management\", \"classroom mgmt\"]:\n            return \"Classroom Management\"\n        if skill.lower() == \"digital mktg\":\n            return \"Digital Marketing\"\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if location.lower() == \"dallas, tx\":\n            return \"Dallas, Texas, United States\"\n        if location.lower() == \"austin, texas area\":\n            return \"Austin, Texas, United States\"\n        if location.lower() == \"new york, new york, united states\":\n            return \"New York, New York, United States\"\n        if \",\" not in location:\n            return location # if it doesn't have a comma, it's probably not in the right format\n\n        parts = location.split(\",\")\n        if len(parts) >= 2:\n            city = parts[0].strip()\n            state_province = parts[1].strip()\n            country = \"United States\"  # Default country\n\n            # Basic state abbreviation standardization\n            if state_province.lower() == \"tx\":\n                state_province = \"Texas\"\n            if state_province.lower() == \"ny\":\n                state_province = \"New York\"\n\n            return f\"{city}, {state_province}, {country}\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")  # Standardize to YYYY-MM\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if \"title\" in experience:\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n            if \"location\" in experience:\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n\n            if \"duration\" in experience:\n                duration = experience[\"duration\"]\n                if \"start_date\" in duration:\n                    duration[\"start_date\"] = normalize_date(duration[\"start_date\"])\n                if \"end_date\" in duration:\n                    duration[\"end_date\"] = normalize_date(duration[\"end_date\"])\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from '{profile.get('title', '')}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from '{profile.get('location', '')}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in normalized_profile and normalized_profile[\"key_skills\"] != profile.get(\"key_skills\", []):\n        normalization_notes.append(f\"Standardized skills from '{profile.get('key_skills', [])}' to '{normalized_profile['key_skills']}'\")\n\n    # Add normalization notes to the profile if any changes were made\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```\n```python\ninput_profile = {\n      \"name\": \"John Smith\",\n      \"title\": \"Sr. Marketing Mgr\",\n      \"location\": \"NYC, New York\",\n      \"key_skills\": [\n        \"Digital Mktg\",\n        \"Salesforce.com\",\n        \"Content Strategy\"\n      ],\n      \"experience\": [\n        {\n          \"company\": \"ACME corp.\",\n          \"title\": \"Senior Mktg Manager\",\n          \"duration\": {\n            \"start_date\": \"January 2020\",\n            \"end_date\": \"Present\",\n            \"date_range\": \"3 years 2 months\"\n          },\n          \"location\": \"New York City\"\n        }\n      ]\n    }\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}