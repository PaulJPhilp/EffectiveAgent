{
  "id": "48eff8a7-71f5-4da9-a012-7ca4d6e9b224",
  "sourceProfileId": "0c915e53-96b4-46c1-898a-deaabcda43c4",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case, preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:\n                normalized_words.append(word)  # Preserve acronyms\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\").replace(\"Ltd\", \"Ltd.\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \"New York City\" in location:\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return the original string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile:\n        for i, (original_exp, normalized_exp) in enumerate(zip(profile[\"experience\"], normalized_profile[\"experience\"])):\n            if original_exp.get(\"company\") != normalized_exp.get(\"company\"):\n                normalization_notes.append(f\"Standardized company name in experience {i+1}: '{original_exp.get('company')}' to '{normalized_exp.get('company')}'\")\n            if original_exp.get(\"title\") != normalized_exp.get(\"title\"):\n                normalization_notes.append(f\"Standardized job title in experience {i+1}: '{original_exp.get('title')}' to '{normalized_exp.get('title')}'\")\n            if original_exp.get(\"location\") != normalized_exp.get(\"location\"):\n                normalization_notes.append(f\"Standardized location in experience {i+1}: '{original_exp.get('location')}' to '{normalized_exp.get('location')}'\")\n            if original_exp.get(\"duration\", {}).get(\"start_date\") != normalized_exp.get(\"duration\", {}).get(\"start_date\"):\n                normalization_notes.append(f\"Standardized start date in experience {i+1}: '{original_exp.get('duration', {}).get('start_date')}' to '{normalized_exp.get('duration', {}).get('start_date')}'\")\n            if original_exp.get(\"duration\", {}).get(\"end_date\") != normalized_exp.get(\"duration\", {}).get(\"end_date\"):\n                normalization_notes.append(f\"Standardized end date in experience {i+1}: '{original_exp.get('duration', {}).get('end_date')}' to '{normalized_exp.get('duration', {}).get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return json.dumps(normalized_profile, indent=2)\n```",
  "normalizedFields": {}
}