{
  "id": "8c35e1a1-fa3b-485b-990b-0cd41920b14b",
  "sourceProfileId": "a15874fc-d41f-4d4d-a4e4-0bda4b9dba99",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the given guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Standardize capitalization (proper case, but preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Specific replacements\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Lume Studios\", \"LUME Studios\") #Preserve all caps\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n\n        # Standardize capitalization (proper case)\n        words = job_title.split()\n        normalized_words = [word.capitalize() for word in words]\n        job_title = \" \".join(normalized_words)\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas\")\n        if \", Texas\" in location and \", United States\" not in location:\n            location = location + \", United States\"\n        if \"New York, New York\" in location and \", United States\" not in location:\n             location = location + \", United States\"\n        if \", TX\" in location and \", United States\" not in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n            if \"end_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if any(s1 != s2 for s1, s2 in zip(profile.get(\"key_skills\", []), normalized_profile.get(\"key_skills\", []))):\n        normalization_notes.append(\"Standardized skills\")\n    for i, (exp_orig, exp_norm) in enumerate(zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        if exp_orig[\"company\"] != exp_norm[\"company\"]:\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: '{exp_orig['company']}' to '{exp_norm['company']}'\")\n        if exp_orig[\"title\"] != exp_norm[\"title\"]:\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: '{exp_orig['title']}' to '{exp_norm['title']}'\")\n        if exp_orig[\"location\"] != exp_norm[\"location\"]:\n            normalization_notes.append(f\"Standardized location in experience {i+1}: '{exp_orig['location']}' to '{exp_norm['location']}'\")\n        if exp_orig[\"duration\"].get(\"start_date\") != exp_norm[\"duration\"].get(\"start_date\"):\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: '{exp_orig['duration'].get('start_date')}' to '{exp_norm['duration'].get('start_date')}'\")\n        if exp_orig[\"duration\"].get(\"end_date\") != exp_norm[\"duration\"].get(\"end_date\"):\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: '{exp_orig['duration'].get('end_date')}' to '{exp_norm['duration'].get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}