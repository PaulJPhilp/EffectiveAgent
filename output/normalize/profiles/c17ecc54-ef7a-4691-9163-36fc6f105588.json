{
  "id": "c17ecc54-ef7a-4691-9163-36fc6f105588",
  "sourceProfileId": "1fc8c009-ea5c-4a8b-9dd9-bb00a8bec18a",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('â€™', \"'\") # Standardize apostrophes\n\n        if company_name.upper() == company_name and len(company_name.split()) == 1:\n            # Assume all-caps is intentional for single-word company names\n            return company_name\n\n        company_name = company_name.title()\n\n        replacements = {\n            \"Inc.\": \"Incorporated\",\n            \"Corp.\": \"Corporation\",\n            \"Ltd.\": \"Limited\",\n            \"Llc\": \"LLC\",\n            \"Gmbh\": \"GmbH\",\n            \"S.A.\": \"SA\",\n            \"Self Employed\": \"Self-Employed\",\n            \"Self-Employed\": \"Self-Employed\", # Ensure consistency\n            \"Fleishmanhillard\": \"Fleishman-Hillard\"\n        }\n\n        for k, v in replacements.items():\n            if company_name.endswith(k):\n                company_name = company_name[:-len(k)].rstrip() + \" \" + v\n            elif company_name == k:\n                company_name = v\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n\n        # Standardize capitalization (first word capitalized, rest lowercase unless acronym)\n        words = job_title.split()\n        normalized_words = []\n        for i, word in enumerate(words):\n            if i == 0:\n                normalized_words.append(word.capitalize())\n            elif word.isupper():\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.lower())\n\n        return \" \".join(normalized_words)\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.strip()\n        skill_replacements = {\n            \"Salesforce.com\": \"Salesforce\",\n            \"Digital Mktg\": \"Digital Marketing\",\n            \"Class Management\": \"Classroom Management\"\n        }\n\n        if skill in skill_replacements:\n            return skill_replacements[skill]\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n\n        if \",\" in location:\n            parts = [p.strip() for p in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"TX\":\n                    return f\"{city}, Texas, United States\"\n                elif state == \"New York\":\n                    return f\"{city}, New York, United States\"\n                else:\n                    return f\"{city}, {state}, United States\" # Assume US if only city and state\n            elif len(parts) == 3:\n                return \", \".join(parts) # Assume already in correct format\n        elif \"Area\" in location:\n            location = location.replace(\" Area\", \"\")\n            return f\"{location}, United States\" # Assume US if \"Area\" is present\n        else:\n            return location + \", United States\" # Assume US if no comma\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        try:\n            # Try parsing with month and year\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            # Try parsing with month and year (short format)\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            # Try parsing with full date\n            date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n            return date_object.strftime(\"%Y-%m-%d\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    if \"title\" in normalized_profile:\n        original_title = normalized_profile[\"title\"]\n        normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n        if original_title != normalized_profile[\"title\"]:\n            normalization_notes.append(f\"Standardized job title from '{original_title}' to '{normalized_profile['title']}'\")\n\n    if \"location\" in normalized_profile:\n        original_location = normalized_profile[\"location\"]\n        normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n        if original_location != normalized_profile[\"location\"]:\n            normalization_notes.append(f\"Standardized location from '{original_location}' to '{normalized_profile['location']}'\")\n\n    if \"key_skills\" in normalized_profile:\n        original_skills = normalized_profile[\"key_skills\"]\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n        if original_skills != normalized_profile[\"key_skills\"]:\n            normalization_notes.append(f\"Standardized skills from '{original_skills}' to '{normalized_profile['key_skills']}'\")\n\n    # Normalize experience entries\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                original_company = experience[\"company\"]\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n                if original_company != experience[\"company\"]:\n                    normalization_notes.append(f\"Standardized company name from '{original_company}' to '{experience['company']}'\")\n\n            if \"title\" in experience:\n                original_title = experience[\"title\"]\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n                if original_title != experience[\"title\"]:\n                    normalization_notes.append(f\"Standardized job title from '{original_title}' to '{experience['title']}' in experience\")\n\n            if \"location\" in experience:\n                original_location = experience[\"location\"]\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n                if original_location != experience[\"location\"]:\n                    normalization_notes.append(f\"Standardized location from '{original_location}' to '{experience['location']}' in experience\")\n\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    original_start_date = experience[\"duration\"][\"start_date\"]\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                    if original_start_date != experience[\"duration\"][\"start_date\"]:\n                        normalization_notes.append(f\"Standardized start date from '{original_start_date}' to '{experience['duration']['start_date']}' in experience\")\n\n                if \"end_date\" in experience[\"duration\"]:\n                    original_end_date = experience[\"duration\"][\"end_date\"]\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n                    if original_end_date != experience[\"duration\"][\"end_date\"]:\n                        normalization_notes.append(f\"Standardized end date from '{original_end_date}' to '{experience['duration']['end_date']}' in experience\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}