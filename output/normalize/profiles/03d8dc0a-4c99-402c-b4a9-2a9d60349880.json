{
  "id": "03d8dc0a-4c99-402c-b4a9-2a9d60349880",
  "sourceProfileId": "eea1d988-17c6-43ed-8a9d-9a9e8db64672",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('â€™', \"'\") # Standardize apostrophes\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"SAP\", \"AWS\", \"LUME Studios\"]:\n            # If all caps and not a known acronym, convert to title case\n            company_name = company_name.title()\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Inc.\")\n        company_name = company_name.replace(\"Corp.\", \"Corp.\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Llp\", \"LLP\")\n        company_name = company_name.replace(\"L.L.C.\", \"LLC\")\n        company_name = company_name.replace(\"L.L.P.\", \"LLP\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Acme Corp\", \"ACME Corp.\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and parts[0] in [\"Manager\", \"Director\", \"VP\", \"Vice President\", \"President\"]:\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"New York City\", \"New York, New York\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas\")\n\n        if \", \" in location:\n            parts = location.split(\", \")\n            if len(parts) == 2:\n                city, state = parts\n                us_states = {\n                    \"TX\": \"Texas\",\n                    \"NY\": \"New York\"\n                }\n                if state.upper() in us_states:\n                    location = f\"{city}, {us_states[state.upper()]}, United States\"\n            elif len(parts) == 3:\n                city, state, country = parts\n                if country.lower() == \"usa\":\n                    country = \"United States\"\n                location = f\"{city}, {state}, {country}\"\n        if location == \"New York, New York\":\n            location = \"New York, New York, United States\"\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Try parsing as \"Month YYYY\"\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            # Try parsing as \"MM/YYYY\"\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp[\"company\"])\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp[\"title\"])\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp[\"location\"])\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"][\"start_date\"])\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile.get(\"location\", \"\") != normalized_profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from '{profile.get('location', '')}' to '{normalized_profile.get('location', '')}'\")\n    if profile.get(\"title\", \"\") != normalized_profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from '{profile.get('title', '')}' to '{normalized_profile.get('title', '')}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i, (old_exp, new_exp) in enumerate(zip(profile[\"experience\"], normalized_profile[\"experience\"])):\n            if old_exp.get(\"company\", \"\") != new_exp.get(\"company\", \"\"):\n                normalization_notes.append(f\"Standardized company name in experience {i+1} from '{old_exp.get('company', '')}' to '{new_exp.get('company', '')}'\")\n            if old_exp.get(\"title\", \"\") != new_exp.get(\"title\", \"\"):\n                normalization_notes.append(f\"Standardized job title in experience {i+1} from '{old_exp.get('title', '')}' to '{new_exp.get('title', '')}'\")\n            if old_exp.get(\"location\", \"\") != new_exp.get(\"location\", \"\"):\n                normalization_notes.append(f\"Standardized location in experience {i+1} from '{old_exp.get('location', '')}' to '{new_exp.get('location', '')}'\")\n            if old_exp.get(\"duration\", {}).get(\"start_date\", \"\") != new_exp.get(\"duration\", {}).get(\"start_date\", \"\"):\n                normalization_notes.append(f\"Standardized start date in experience {i+1} from '{old_exp.get('duration', {}).get('start_date', '')}' to '{new_exp.get('duration', {}).get('start_date', '')}'\")\n            if old_exp.get(\"duration\", {}).get(\"end_date\", \"\") != new_exp.get(\"duration\", {}).get(\"end_date\", \"\"):\n                normalization_notes.append(f\"Standardized end date in experience {i+1} from '{old_exp.get('duration', {}).get('end_date', '')}' to '{new_exp.get('duration', {}).get('end_date', '')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}