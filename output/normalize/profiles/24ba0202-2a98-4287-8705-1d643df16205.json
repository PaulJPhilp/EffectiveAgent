{
  "id": "24ba0202-2a98-4287-8705-1d643df16205",
  "sourceProfileId": "de25633b-7104-4c35-b9b1-9d3a5a1bd628",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): A dictionary representing the profile data.\n\n    Returns:\n        dict: A normalized dictionary representing the profile data.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Normalize Job Title\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n\n    # 2. Normalize Location\n    original_location = normalized_profile[\"location\"]\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n    if original_location != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{original_location}' to '{normalized_profile['location']}'\")\n\n    # 3. Normalize Skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # 4. Normalize Experience\n    for experience in normalized_profile[\"experience\"]:\n        # Normalize Company Name\n        original_company = experience[\"company\"]\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        if original_company != experience[\"company\"]:\n            normalization_notes.append(f\"Standardized company name from '{original_company}' to '{experience['company']}'\")\n\n        # Normalize Job Title\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n\n        # Normalize Dates\n        original_start_date = experience[\"duration\"][\"start_date\"]\n        experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n        if original_start_date != experience[\"duration\"][\"start_date\"]:\n            normalization_notes.append(f\"Standardized start date from '{original_start_date}' to '{experience['duration']['start_date']}'\")\n\n        if experience[\"duration\"][\"end_date\"] != \"Present\":\n            original_end_date = experience[\"duration\"][\"end_date\"]\n            experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n            if original_end_date != experience[\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date from '{original_end_date}' to '{experience['duration']['end_date']}'\")\n\n        # Normalize Location\n        original_location = experience[\"location\"]\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n        if original_location != experience[\"location\"]:\n            normalization_notes.append(f\"Standardized location from '{original_location}' to '{experience['location']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n\n\ndef normalize_company_name(company_name):\n    \"\"\"Normalizes a company name.\"\"\"\n    company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n    company_name = company_name.replace(\".\", \"\")  # Remove periods\n    company_name = company_name.replace(\",\", \"\")  # Remove commas\n\n    if company_name.upper() == \"CHANEL\":\n        return \"Chanel\"\n    if company_name.lower() == \"self-employed\":\n        return \"Self-Employed\"\n    if company_name == \"FleishmanHillard\":\n        return \"Fleishman-Hillard\"\n    if company_name == \"LUME studios\":\n        return \"LUME Studios\"\n    if company_name.endswith(\"Inc\"):\n        company_name = company_name[:-3] + \"Inc.\"\n    if company_name.endswith(\"Corp\"):\n        company_name = company_name[:-4] + \"Corp.\"\n\n    words = [word.capitalize() for word in company_name.split()]\n    return \" \".join(words)\n\n\ndef normalize_job_title(job_title):\n    \"\"\"Normalizes a job title.\"\"\"\n    job_title = job_title.replace(\"Sr.\", \"Senior\")\n    job_title = job_title.replace(\"Mgr\", \"Manager\")\n    job_title = job_title.replace(\"Proj.\", \"Project\")\n    job_title = job_title.replace(\",\", \"\")\n\n    return job_title\n\n\ndef normalize_skill(skill):\n    \"\"\"Normalizes a skill.\"\"\"\n    if skill.lower() == \"salesforce.com\":\n        return \"Salesforce\"\n    if skill.lower() == \"digital mktg\":\n        return \"Digital Marketing\"\n    return skill\n\n\ndef normalize_location(location):\n    \"\"\"Normalizes a location.\"\"\"\n    location = location.replace(\"NYC\", \"New York\")\n    if location.endswith(\"TX\"):\n        location = location.replace(\"TX\", \"Texas\")\n    if \"Area\" in location:\n        location = location.replace(\" Area\", \"\")\n\n    parts = location.split(\", \")\n    if len(parts) == 2:\n        city, state = parts\n        if state == \"Texas\":\n            return f\"{city}, Texas, United States\"\n        if state == \"New York\":\n            return f\"{city}, New York, United States\"\n    return location\n\n\ndef normalize_date(date_string):\n    \"\"\"Normalizes a date string to ISO format (YYYY-MM).\"\"\"\n    date_string = date_string.replace(\"Jan\", \"January\")\n    date_string = date_string.replace(\"Feb\", \"February\")\n    date_string = date_string.replace(\"Mar\", \"March\")\n    date_string = date_string.replace(\"Apr\", \"April\")\n    date_string = date_string.replace(\"May\", \"May\")\n    date_string = date_string.replace(\"Jun\", \"June\")\n    date_string = date_string.replace(\"Jul\", \"July\")\n    date_string = date_string.replace(\"Aug\", \"August\")\n    date_string = date_string.replace(\"Sep\", \"September\")\n    date_string = date_string.replace(\"Oct\", \"October\")\n    date_string = date_string.replace(\"Nov\", \"November\")\n    date_string = date_string.replace(\"Dec\", \"December\")\n\n    try:\n        if re.match(r\"^\\d{2}/\\d{4}$\", date_string):\n            dt_object = datetime.strptime(date_string, \"%m/%Y\")\n            return dt_object.strftime(\"%Y-%m\")\n        dt_object = datetime.strptime(date_string, \"%B %Y\")\n        return dt_object.strftime(\"%Y-%m\")\n    except ValueError:\n        return date_string\n\n\n# Example usage with the provided input profile:\ninput_profile = {\n  \"name\": \"John Smith\",\n  \"title\": \"Sr. Marketing Mgr\",\n  \"location\": \"NYC, New York\",\n  \"key_skills\": [\n    \"Digital Mktg\",\n    \"Salesforce.com\",\n    \"Content Strategy\"\n  ],\n  \"experience\": [\n    {\n      \"company\": \"ACME corp.\",\n      \"title\": \"Senior Mktg Manager\",\n      \"duration\": {\n        \"start_date\": \"January 2020\",\n        \"end_date\": \"Present\",\n        \"date_range\": \"3 years 2 months\"\n      },\n      \"location\": \"New York City\"\n    }\n  ]\n}\n\nnormalized_profile = normalize_profile(input_profile)\nprint(json.dumps(normalized_profile, indent=2))\n```",
  "normalizedFields": {}
}