{
  "id": "3304188d-b406-4745-9c2f-7067fa0a9b10",
  "sourceProfileId": "74b69ba8-840d-413f-818a-bc2646df3831",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        # Apply standard capitalization (proper case, preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\")\n        company_name = company_name.replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Ltd.\", \"Ltd\")\n        company_name = company_name.replace(\"Limited\", \"Ltd\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2 and parts[0].lower() in [\"manager\", \"director\", \"vp\", \"vice president\", \"president\", \"lead\", \"associate\"]:\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n\n        if \",\" not in location:\n            return location # Can't reliably normalize without commas\n\n        parts = location.split(\",\")\n        parts = [p.strip() for p in parts]\n\n        if len(parts) == 2:\n            city, state = parts\n            # Basic state abbreviation check (very limited)\n            if len(state) == 2 and state.isupper():\n                location = f\"{city}, {state}, United States\"\n            else:\n                location = f\"{city}, {state}\" #Preserve as is\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Try parsing with different formats\n            date_obj = None\n            for fmt in [\"%B %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"]:\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for exp in normalized_profile[\"experience\"]:\n            if \"company\" in exp:\n                exp[\"company\"] = normalize_company_name(exp.get(\"company\", \"\"))\n            if \"title\" in exp:\n                exp[\"title\"] = normalize_job_title(exp.get(\"title\", \"\"))\n            if \"location\" in exp:\n                exp[\"location\"] = normalize_location(exp.get(\"location\", \"\"))\n\n            if \"duration\" in exp:\n                if \"start_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"start_date\"] = normalize_date(exp[\"duration\"].get(\"start_date\", \"\"))\n                if \"end_date\" in exp[\"duration\"]:\n                    exp[\"duration\"][\"end_date\"] = normalize_date(exp[\"duration\"].get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills: '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n\n    for i in range(len(profile.get(\"experience\", []))):\n        original_exp = profile[\"experience\"][i]\n        normalized_exp = normalized_profile[\"experience\"][i]\n        if original_exp.get(\"company\") != normalized_exp.get(\"company\"):\n            normalization_notes.append(f\"Standardized company name: '{original_exp.get('company')}' to '{normalized_exp.get('company')}'\")\n        if original_exp.get(\"title\") != normalized_exp.get(\"title\"):\n            normalization_notes.append(f\"Standardized job title in experience: '{original_exp.get('title')}' to '{normalized_exp.get('title')}'\")\n        if original_exp.get(\"location\") != normalized_exp.get(\"location\"):\n            normalization_notes.append(f\"Standardized location in experience: '{original_exp.get('location')}' to '{normalized_exp.get('location')}'\")\n        if original_exp.get(\"duration\", {}).get(\"start_date\") != normalized_exp.get(\"duration\", {}).get(\"start_date\"):\n            normalization_notes.append(f\"Standardized start date in experience: '{original_exp.get('duration', {}).get('start_date')}' to '{normalized_exp.get('duration', {}).get('start_date')}'\")\n        if original_exp.get(\"duration\", {}).get(\"end_date\") != normalized_exp.get(\"duration\", {}).get(\"end_date\"):\n            normalization_notes.append(f\"Standardized end date in experience: '{original_exp.get('duration', {}).get('end_date')}' to '{normalized_exp.get('duration', {}).get('end_date')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```\n",
  "normalizedFields": {}
}