{
  "id": "f9acfeae-e48a-4358-bf23-f74ddf9dae18",
  "sourceProfileId": "5b478891-dfea-4596-a834-c6155812202c",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): A dictionary representing the profile data.\n\n    Returns:\n        dict: A normalized version of the profile data.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n        company_name = company_name.replace('  ', ' ')  # Remove double spaces again after period standardization\n\n        if company_name.upper() == company_name and company_name not in [\"ACME\", \"LUME\"]:\n            company_name = company_name.title()\n        else:\n            company_name = ''.join([s.upper() if s.isupper() else s for s in company_name])\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Llp\", \"LLP\")\n        company_name = company_name.replace(\"Pty Ltd\", \"Pty Ltd\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        if \", TX\" in location:\n            location = location.replace(\", TX\", \", Texas, United States\")\n        if \"Austin, Texas Area\" in location:\n            location = \"Austin, Texas, United States\"\n        if \"New York, New York, United States\" in location:\n            location = \"New York, New York, United States\"\n        if \"New York City\" in location:\n            location = \"New York, New York, United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            date_object = datetime.strptime(date_string, \"%B %Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        try:\n            date_object = datetime.strptime(date_string, \"%m/%Y\")\n            return date_object.strftime(\"%Y-%m\")\n        except ValueError:\n            pass\n\n        return date_string  # Return original if parsing fails\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize skills\n    if \"key_skills\" in normalized_profile and isinstance(normalized_profile[\"key_skills\"], list):\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile and isinstance(normalized_profile[\"experience\"], list):\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if \"title\" in experience:\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n            if \"location\" in experience:\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if \"end_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile.get(\"location\", \"\") != normalized_profile.get(\"location\", \"\"):\n        normalization_notes.append(f\"Standardized location from {profile.get('location', '')} to {normalized_profile.get('location', '')}\")\n    if profile.get(\"title\", \"\") != normalized_profile.get(\"title\", \"\"):\n        normalization_notes.append(f\"Standardized job title from {profile.get('title', '')} to {normalized_profile.get('title', '')}\")\n    if \"key_skills\" in profile and \"key_skills\" in normalized_profile:\n        for i in range(min(len(profile[\"key_skills\"]), len(normalized_profile[\"key_skills\"]))):\n            if profile[\"key_skills\"][i] != normalized_profile[\"key_skills\"][i]:\n                normalization_notes.append(f\"Standardized skill from {profile['key_skills'][i]} to {normalized_profile['key_skills'][i]}\")\n    if \"experience\" in profile and \"experience\" in normalized_profile:\n        for i in range(min(len(profile[\"experience\"]), len(normalized_profile[\"experience\"]))):\n            if profile[\"experience\"][i].get(\"company\", \"\") != normalized_profile[\"experience\"][i].get(\"company\", \"\"):\n                normalization_notes.append(f\"Standardized company name from {profile['experience'][i].get('company', '')} to {normalized_profile['experience'][i].get('company', '')}\")\n            if profile[\"experience\"][i].get(\"title\", \"\") != normalized_profile[\"experience\"][i].get(\"title\", \"\"):\n                normalization_notes.append(f\"Standardized job title in experience from {profile['experience'][i].get('title', '')} to {normalized_profile['experience'][i].get('title', '')}\")\n            if profile[\"experience\"][i].get(\"location\", \"\") != normalized_profile[\"experience\"][i].get(\"location\", \"\"):\n                normalization_notes.append(f\"Standardized location in experience from {profile['experience'][i].get('location', '')} to {normalized_profile['experience'][i].get('location', '')}\")\n            if profile[\"experience\"][i][\"duration\"].get(\"start_date\", \"\") != normalized_profile[\"experience\"][i][\"duration\"].get(\"start_date\", \"\"):\n                normalization_notes.append(f\"Standardized start date in experience from {profile['experience'][i]['duration'].get('start_date', '')} to {normalized_profile['experience'][i]['duration'].get('start_date', '')}\")\n            if profile[\"experience\"][i][\"duration\"].get(\"end_date\", \"\") != normalized_profile[\"experience\"][i][\"duration\"].get(\"end_date\", \"\"):\n                normalization_notes.append(f\"Standardized end date in experience from {profile['experience'][i]['duration'].get('end_date', '')} to {normalized_profile['experience'][i]['duration'].get('end_date', '')}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}