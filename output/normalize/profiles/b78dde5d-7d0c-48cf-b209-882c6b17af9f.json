{
  "id": "b78dde5d-7d0c-48cf-b209-882c6b17af9f",
  "sourceProfileId": "c13fce13-2ed7-4851-9674-786dd73afa2a",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): The input profile data as a dictionary.\n\n    Returns:\n        dict: The normalized profile data as a dictionary.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\.+', '.', company_name)  # Standardize periods\n\n        if company_name.upper() == company_name and company_name not in [\"IBM\", \"AT&T\"]:\n            company_name = company_name.title()\n        else:\n            company_name = company_name.title()\n\n        company_name = company_name.replace(\"Inc.\", \"Incorporated\")\n        company_name = company_name.replace(\"Corp.\", \"Corporation\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Ltd.\", \"Limited\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize \"Manager, Marketing\" to \"Marketing Manager\"\n        if \"Manager, \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = parts[1] + \" \" + parts[0]\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas\")\n\n        if \", New York\" in location and \", United States\" not in location:\n            location = location + \", United States\"\n        if \", Texas\" in location and \", United States\" not in location:\n            location = location + \", United States\"\n\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    if \"key_skills\" in normalized_profile:\n        normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile[\"key_skills\"]]\n\n    # Normalize experience\n    if \"experience\" in normalized_profile:\n        for experience in normalized_profile[\"experience\"]:\n            if \"company\" in experience:\n                experience[\"company\"] = normalize_company_name(experience[\"company\"])\n            if \"title\" in experience:\n                experience[\"title\"] = normalize_job_title(experience[\"title\"])\n            if \"location\" in experience:\n                experience[\"location\"] = normalize_location(experience[\"location\"])\n\n            if \"duration\" in experience:\n                if \"start_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n                if \"end_date\" in experience[\"duration\"]:\n                    experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect normalization notes\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location from '{profile['location']}' to '{normalized_profile['location']}'\")\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title from '{profile['title']}' to '{normalized_profile['title']}'\")\n    if \"key_skills\" in profile and profile[\"key_skills\"] != normalized_profile[\"key_skills\"]:\n        normalization_notes.append(f\"Standardized skills from '{profile['key_skills']}' to '{normalized_profile['key_skills']}'\")\n    if \"experience\" in profile:\n        for i, (original_exp, normalized_exp) in enumerate(zip(profile[\"experience\"], normalized_profile[\"experience\"])):\n            if original_exp[\"company\"] != normalized_exp[\"company\"]:\n                normalization_notes.append(f\"Standardized company name in experience {i+1} from '{original_exp['company']}' to '{normalized_exp['company']}'\")\n            if original_exp[\"title\"] != normalized_exp[\"title\"]:\n                normalization_notes.append(f\"Standardized job title in experience {i+1} from '{original_exp['title']}' to '{normalized_exp['title']}'\")\n            if original_exp[\"location\"] != normalized_exp[\"location\"]:\n                normalization_notes.append(f\"Standardized location in experience {i+1} from '{original_exp['location']}' to '{normalized_exp['location']}'\")\n            if original_exp[\"duration\"][\"start_date\"] != normalized_exp[\"duration\"][\"start_date\"]:\n                normalization_notes.append(f\"Standardized start date in experience {i+1} from '{original_exp['duration']['start_date']}' to '{normalized_exp['duration']['start_date']}'\")\n            if original_exp[\"duration\"][\"end_date\"] != normalized_exp[\"duration\"][\"end_date\"]:\n                normalization_notes.append(f\"Standardized end date in experience {i+1} from '{original_exp['duration']['end_date']}' to '{normalized_exp['duration']['end_date']}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}