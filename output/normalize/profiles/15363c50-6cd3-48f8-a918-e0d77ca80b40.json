{
  "id": "15363c50-6cd3-48f8-a918-e0d77ca80b40",
  "sourceProfileId": "36a21a3d-d76f-46a1-9641-328c8332cc84",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"Normalizes a professional profile according to the specified guidelines.\"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = re.sub(r'\\s+', ' ', company_name).strip()  # Standardize spaces\n        \n        # Apply standard capitalization (proper case for most names, preserve well-known acronyms)\n        words = []\n        for word in company_name.split():\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                words.append(word)\n            else:\n                words.append(word.capitalize())\n        company_name = \" \".join(words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\").replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\").replace(\"Ltd.\", \"Ltd\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Fleishmanhillard\", \"Fleishman-Hillard\")\n\n        return company_name\n\n    # 2. Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\").replace(\"Sr\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\").replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n        job_title = job_title.replace(\"Assoc.\", \"Associate\")\n\n        # Standardize order (e.g., \"Manager, Marketing\" -> \"Marketing Manager\")\n        if \", \" in job_title:\n            parts = job_title.split(\", \")\n            if len(parts) == 2:\n                job_title = f\"{parts[1]} {parts[0]}\"\n\n        return job_title\n\n    # 3. Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC, New York\", \"New York, New York\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas\")\n\n        if \", \" in location:\n            parts = location.split(\", \")\n            if len(parts) == 2:\n                location = f\"{parts[0]}, {parts[1]}, United States\"\n            elif len(parts) == 3:\n                return location # Assume already normalized\n        return location\n\n    # 5. Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.strip()\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Attempt to parse various date formats\n            date_object = None\n            for fmt in (\"%B %Y\", \"%b %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"):\n                try:\n                    date_object = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_object:\n                return date_object.strftime(\"%Y-%m\")\n            else:\n                # If parsing fails, return the original string\n                return date_string\n        except ValueError:\n            return date_string\n\n    # Normalize top-level fields\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile.get(\"title\", \"\"))\n    normalized_profile[\"location\"] = normalize_location(normalized_profile.get(\"location\", \"\"))\n\n    # Normalize key skills\n    normalized_profile[\"key_skills\"] = [normalize_skill(skill) for skill in normalized_profile.get(\"key_skills\", [])]\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience.get(\"company\", \"\"))\n        experience[\"title\"] = normalize_job_title(experience.get(\"title\", \"\"))\n        experience[\"location\"] = normalize_location(experience.get(\"location\", \"\"))\n\n        if \"duration\" in experience:\n            duration = experience[\"duration\"]\n            duration[\"start_date\"] = normalize_date(duration.get(\"start_date\", \"\"))\n            duration[\"end_date\"] = normalize_date(duration.get(\"end_date\", \"\"))\n\n    # Collect normalization notes\n    if profile[\"title\"] != normalized_profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: {profile['title']} -> {normalized_profile['title']}\")\n    if profile[\"location\"] != normalized_profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: {profile['location']} -> {normalized_profile['location']}\")\n    if any(s1 != s2 for s1, s2 in zip(profile.get(\"key_skills\", []), normalized_profile.get(\"key_skills\", []))):\n        normalization_notes.append(\"Standardized key skills\")\n    for i, (exp_orig, exp_norm) in enumerate(zip(profile.get(\"experience\", []), normalized_profile.get(\"experience\", []))):\n        if exp_orig.get(\"company\") != exp_norm.get(\"company\"):\n            normalization_notes.append(f\"Standardized company name in experience {i+1}: {exp_orig.get('company')} -> {exp_norm.get('company')}\")\n        if exp_orig.get(\"title\") != exp_norm.get(\"title\"):\n            normalization_notes.append(f\"Standardized job title in experience {i+1}: {exp_orig.get('title')} -> {exp_norm.get('title')}\")\n        if exp_orig.get(\"location\") != exp_norm.get(\"location\"):\n            normalization_notes.append(f\"Standardized location in experience {i+1}: {exp_orig.get('location')} -> {exp_norm.get('location')}\")\n        if exp_orig.get(\"duration\", {}).get(\"start_date\") != exp_norm.get(\"duration\", {}).get(\"start_date\"):\n            normalization_notes.append(f\"Standardized start date in experience {i+1}: {exp_orig.get('duration', {}).get('start_date')} -> {exp_norm.get('duration', {}).get('start_date')}\")\n        if exp_orig.get(\"duration\", {}).get(\"end_date\") != exp_norm.get(\"duration\", {}).get(\"end_date\"):\n            normalization_notes.append(f\"Standardized end date in experience {i+1}: {exp_orig.get('duration', {}).get('end_date')} -> {exp_norm.get('duration', {}).get('end_date')}\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}