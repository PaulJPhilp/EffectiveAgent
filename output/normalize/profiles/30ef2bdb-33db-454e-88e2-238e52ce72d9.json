{
  "id": "30ef2bdb-33db-454e-88e2-238e52ce72d9",
  "sourceProfileId": "85f54ae4-f60d-4c68-a6d2-f16a6a3a7e58",
  "content": "```python\nimport json\nimport re\nfrom datetime import datetime\n\ndef normalize_profile(profile):\n    \"\"\"\n    Normalizes a professional profile according to the specified guidelines.\n\n    Args:\n        profile (dict): A dictionary representing the profile data.\n\n    Returns:\n        dict: A normalized dictionary representing the profile data.\n    \"\"\"\n\n    normalization_notes = []\n    normalized_profile = profile.copy()\n\n    # 1. Normalize Company Names\n    def normalize_company_name(company_name):\n        if not company_name:\n            return company_name\n\n        company_name = \" \".join(company_name.split())  # Remove duplicate spaces\n        company_name = company_name.replace(\"â€™\", \"'\")  # Standardize apostrophes\n\n        # Apply standard capitalization (proper case, preserve acronyms)\n        words = company_name.split()\n        normalized_words = []\n        for word in words:\n            if word.isupper() and len(word) > 1:  # Preserve acronyms\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.capitalize())\n        company_name = \" \".join(normalized_words)\n\n        # Standardize common variations\n        company_name = company_name.replace(\"Inc.\", \"Inc\")\n        company_name = company_name.replace(\"Incorporated\", \"Inc\")\n        company_name = company_name.replace(\"Llc\", \"LLC\")\n        company_name = company_name.replace(\"Ltd.\", \"Ltd\")\n        company_name = company_name.replace(\"Limited\", \"Ltd\")\n        company_name = company_name.replace(\"Corp.\", \"Corp\")\n        company_name = company_name.replace(\"Corporation\", \"Corp\")\n        company_name = company_name.replace(\"Self Employed\", \"Self-Employed\")\n        company_name = company_name.replace(\"Self employed\", \"Self-Employed\")\n\n\n        return company_name\n\n    # 2. Normalize Job Titles\n    def normalize_job_title(job_title):\n        if not job_title:\n            return job_title\n\n        job_title = job_title.replace(\"Sr.\", \"Senior\")\n        job_title = job_title.replace(\"Mgr\", \"Manager\")\n        job_title = job_title.replace(\"Proj.\", \"Project\")\n        job_title = job_title.replace(\"Mktg\", \"Marketing\")\n\n        # Standardize capitalization (first word capitalized, rest lowercase unless acronym)\n        words = job_title.split()\n        normalized_words = [words[0].capitalize()]\n        for word in words[1:]:\n            if word.isupper() and len(word) > 1:\n                normalized_words.append(word)\n            else:\n                normalized_words.append(word.lower().capitalize())\n        job_title = \" \".join(normalized_words)\n\n        return job_title\n\n    # 3. Normalize Skills\n    def normalize_skill(skill):\n        if not skill:\n            return skill\n\n        skill = skill.replace(\"Salesforce.com\", \"Salesforce\")\n        skill = skill.replace(\"Digital Mktg\", \"Digital Marketing\")\n        skill = skill.replace(\"Class Management\", \"Classroom Management\")\n\n        return skill\n\n    # 4. Normalize Locations\n    def normalize_location(location):\n        if not location:\n            return location\n\n        location = location.replace(\"NYC\", \"New York\")\n        location = location.replace(\"New York City\", \"New York\")\n        location = location.replace(\"Austin, Texas Area\", \"Austin, Texas, United States\")\n        location = location.replace(\"Dallas, TX\", \"Dallas, Texas, United States\")\n\n        if \",\" in location:\n            parts = [s.strip() for s in location.split(\",\")]\n            if len(parts) == 2:\n                city, state = parts\n                if state == \"NY\" or state == \"New York\":\n                    return f\"{city}, New York, United States\"\n                elif state == \"TX\" or state == \"Texas\":\n                    return f\"{city}, Texas, United States\"\n                else:\n                    return location # If we don't know how to normalize, return original\n            elif len(parts) == 3:\n                return location # Assume it's already in the correct format\n            else:\n                return location # If we don't know how to normalize, return original\n        else:\n            return location # If we don't know how to normalize, return original\n\n    # 5. Normalize Dates\n    def normalize_date(date_string):\n        if not date_string:\n            return date_string\n\n        date_string = date_string.replace(\"Jan\", \"January\")\n        date_string = date_string.replace(\"Feb\", \"February\")\n        date_string = date_string.replace(\"Mar\", \"March\")\n        date_string = date_string.replace(\"Apr\", \"April\")\n        date_string = date_string.replace(\"May\", \"May\")\n        date_string = date_string.replace(\"Jun\", \"June\")\n        date_string = date_string.replace(\"Jul\", \"July\")\n        date_string = date_string.replace(\"Aug\", \"August\")\n        date_string = date_string.replace(\"Sep\", \"September\")\n        date_string = date_string.replace(\"Oct\", \"October\")\n        date_string = date_string.replace(\"Nov\", \"November\")\n        date_string = date_string.replace(\"Dec\", \"December\")\n\n        if date_string.lower() == \"present\":\n            return \"Present\"\n\n        try:\n            # Try parsing with different formats\n            date_obj = None\n            for fmt in [\"%B %Y\", \"%m/%Y\", \"%Y-%m-%d\", \"%Y-%m\"]:\n                try:\n                    date_obj = datetime.strptime(date_string, fmt)\n                    break\n                except ValueError:\n                    pass\n\n            if date_obj:\n                return date_obj.strftime(\"%Y-%m\")\n            else:\n                return date_string  # Return original if parsing fails\n        except ValueError:\n            return date_string  # Return original if parsing fails\n\n    # Apply Normalizations\n    normalized_profile[\"title\"] = normalize_job_title(normalized_profile[\"title\"])\n    normalized_profile[\"location\"] = normalize_location(normalized_profile[\"location\"])\n\n    # Normalize key skills\n    normalized_skills = []\n    for skill in normalized_profile.get(\"key_skills\", []):\n        normalized_skills.append(normalize_skill(skill))\n    normalized_profile[\"key_skills\"] = normalized_skills\n\n    # Normalize experience\n    for experience in normalized_profile.get(\"experience\", []):\n        experience[\"company\"] = normalize_company_name(experience[\"company\"])\n        experience[\"title\"] = normalize_job_title(experience[\"title\"])\n        experience[\"location\"] = normalize_location(experience[\"location\"])\n\n        if \"duration\" in experience:\n            if \"start_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"start_date\"] = normalize_date(experience[\"duration\"][\"start_date\"])\n            if \"end_date\" in experience[\"duration\"]:\n                experience[\"duration\"][\"end_date\"] = normalize_date(experience[\"duration\"][\"end_date\"])\n\n    # Collect Normalization Notes\n    if normalized_profile[\"title\"] != profile[\"title\"]:\n        normalization_notes.append(f\"Standardized job title: '{profile['title']}' to '{normalized_profile['title']}'\")\n    if normalized_profile[\"location\"] != profile[\"location\"]:\n        normalization_notes.append(f\"Standardized location: '{profile['location']}' to '{normalized_profile['location']}'\")\n    if any(normalized_skills[i] != profile[\"key_skills\"][i] for i in range(len(normalized_skills))):\n        normalization_notes.append(\"Standardized key skills\")\n    for i, experience in enumerate(normalized_profile.get(\"experience\", [])):\n        original_experience = profile.get(\"experience\", [])[i] if i < len(profile.get(\"experience\", [])) else {}\n        if experience[\"company\"] != original_experience.get(\"company\", \"\"):\n            normalization_notes.append(f\"Standardized company name: '{original_experience.get('company', '')}' to '{experience['company']}'\")\n        if experience[\"title\"] != original_experience.get(\"title\", \"\"):\n            normalization_notes.append(f\"Standardized job title in experience: '{original_experience.get('title', '')}' to '{experience['title']}'\")\n        if experience[\"location\"] != original_experience.get(\"location\", \"\"):\n            normalization_notes.append(f\"Standardized location in experience: '{original_experience.get('location', '')}' to '{experience['location']}'\")\n        if experience[\"duration\"].get(\"start_date\") != original_experience[\"duration\"].get(\"start_date\", \"\"):\n            normalization_notes.append(f\"Standardized start date in experience: '{original_experience['duration'].get('start_date', '')}' to '{experience['duration'].get('start_date', '')}'\")\n        if experience[\"duration\"].get(\"end_date\") != original_experience[\"duration\"].get(\"end_date\", \"\"):\n            normalization_notes.append(f\"Standardized end date in experience: '{original_experience['duration'].get('end_date', '')}' to '{experience['duration'].get('end_date', '')}'\")\n\n    if normalization_notes:\n        normalized_profile[\"normalization_notes\"] = \"; \".join(normalization_notes)\n\n    return normalized_profile\n```",
  "normalizedFields": {}
}