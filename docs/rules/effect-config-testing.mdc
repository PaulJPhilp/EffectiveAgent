---
description: 
globs: 
alwaysApply: false
---
# Testing Effect Config Services

## Overview
Guidelines for testing services that use Effect's Config system for configuration loading and validation.

## Core Testing Pattern
```typescript
describe("ConfigBasedService", () => {
    // Setup test data
    let tempDir: string;
    let configPath: string;

    // Create test files before running tests
    beforeAll(async () => {
        tempDir = path.join(__dirname, "temp");
        await fs.mkdir(tempDir, { recursive: true });
        configPath = path.join(tempDir, "config.json");

        // Sample valid config
        const validConfig = {
            name: "Test Config",
            version: "1.0.0",
            items: [{
                id: "test-item",
                // ... other required fields
            }]
        };

        await fs.writeFile(configPath, JSON.stringify(validConfig, null, 2));
    });

    // Clean up after tests
    afterAll(async () => {
        if (tempDir) {
            await fs.rm(tempDir, { recursive: true, force: true });
        }
    });

    // Helper to create test layer with file-based config
    const createTestLayer = () => {
        return Effect.gen(function* () {
            const fileContent = yield* Effect.tryPromise(() =>
                fs.readFile(configPath, 'utf-8')
            );
            const config = JSON.parse(fileContent);
            return Layer.provide(
                ServiceLiveLayer,
                Layer.succeed(ConfigProvider.ConfigProvider, ConfigProvider.fromJson({
                    configKey: JSON.stringify(config)
                }))
            );
        });
    };

    it("should load and provide valid configuration", async () => {
        const testEffect = Effect.gen(function* () {
            const testLayer = yield* createTestLayer();
            const accessConfig = Effect.gen(function* () {
                const service = yield* ServiceTag;
                // Test service functionality
                return service;
            });
            return yield* Effect.provide(accessConfig, testLayer);
        });

        await Effect.runPromise(testEffect);
    });
});
```

## Test Categories

1. Basic Configuration Loading
```typescript
it("should load and provide valid configuration", async () => {
    const testEffect = Effect.gen(function* () {
        const testLayer = yield* createTestLayer();
        const accessConfig = Effect.gen(function* () {
            const service = yield* ServiceTag;
            expect(service).toBeInstanceOf(ServiceData);
            // Test basic properties
            return service;
        });
        return yield* Effect.provide(accessConfig, testLayer);
    });

    await Effect.runPromise(testEffect);
});
```

2. Error Handling
```typescript
it("should fail with ServiceError if config is missing", async () => {
    const testEffect = Effect.gen(function* () {
        const testLayer = Layer.provide(
            ServiceLiveLayer,
            Layer.succeed(ConfigProvider.ConfigProvider, ConfigProvider.fromJson({}))
        );
        const accessConfig = Effect.gen(function* () {
            return yield* ServiceTag;
        });
        return yield* Effect.provide(accessConfig, testLayer);
    });

    const result = await Effect.runPromiseExit(testEffect);
    Exit.match(result, {
        onFailure: (cause) => {
            const error = Cause.failureOption(cause);
            expect(Option.isSome(error)).toBe(true);
            if (Option.isSome(error)) {
                expect(error.value).toBeInstanceOf(ServiceError);
            }
        },
        onSuccess: () => {
            throw new Error("Expected failure but got success");
        }
    });
});
```

## Best Practices

1. Test Setup
- Use temporary directories for test files
- Clean up test files after tests
- Use descriptive test data
- Provide helper functions for common setup
- Keep test config minimal but valid

2. Test Layer Creation
- Create reusable layer setup functions
- Use ConfigProvider.fromJson for testing
- Provide clean test data for each test
- Reset state between tests
- Handle file system operations safely

3. Error Testing
- Test missing configuration
- Test invalid configuration format
- Test schema validation failures
- Test all error paths
- Verify error messages and types

4. Service Testing
- Test all service methods
- Verify data transformations
- Test edge cases
- Test with minimal valid config
- Test with complex configurations

5. Test Organization
- Group related tests together
- Use clear test descriptions
- Follow Arrange-Act-Assert pattern
- Keep tests focused and atomic
- Use shared setup when appropriate

## Anti-patterns to Avoid

1. DO NOT:
- Use real config files in tests
- Leave test files uncleaned
- Skip error path testing
- Use hardcoded file paths
- Mix test concerns

2. NEVER:
- Share state between tests
- Use actual file system in unit tests
- Skip cleanup in afterAll
- Ignore test failures
- Use setTimeout in tests

## Example Test Implementation

```typescript
describe("ModelConfigLiveLayer", () => {
    let tempDir: string;
    let modelsJsonPath: string;

    beforeAll(async () => {
        tempDir = path.join(__dirname, "temp");
        await fs.mkdir(tempDir, { recursive: true });
        modelsJsonPath = path.join(tempDir, "models.json");

        const validConfig = {
            name: "Test Config",
            version: "1.0.0",
            models: [{
                id: "test-model",
                name: "Test Model",
                version: "1.0.0",
                provider: "test-provider",
                modelName: "test-model-name",
                contextWindowSize: "medium",
                costPer1kInputTokens: 0.01,
                costPer1kOutputTokens: 0.02,
                capabilities: ["chat"]
            }]
        };

        await fs.writeFile(modelsJsonPath, JSON.stringify(validConfig, null, 2));
    });

    afterAll(async () => {
        if (tempDir) {
            await fs.rm(tempDir, { recursive: true, force: true });
        }
    });

    const createTestLayer = () => {
        return Effect.gen(function* () {
            const fileContent = yield* Effect.tryPromise(() =>
                fs.readFile(modelsJsonPath, 'utf-8')
            );
            const config = JSON.parse(fileContent);
            return Layer.provide(
                ModelConfigLiveLayer,
                Layer.succeed(ConfigProvider.ConfigProvider, ConfigProvider.fromJson({
                    models: JSON.stringify(config)
                }))
            );
        });
    };

    it("should load and validate model configuration", async () => {
        const testEffect = Effect.gen(function* () {
            const testLayer = yield* createTestLayer();
            const accessModelConfig = Effect.gen(function* () {
                const configData = yield* ModelConfigDataTag;
                expect(configData).toBeInstanceOf(ModelConfigData);
                const model = Option.getOrNull(HashMap.get(configData.models, "test-model"));
                expect(model?.name).toBe("Test Model");
                return configData;
            });
            return yield* Effect.provide(accessModelConfig, testLayer);
        });

        await Effect.runPromise(testEffect);
    });

    // Additional test cases for errors, validation, etc.
});
``` 