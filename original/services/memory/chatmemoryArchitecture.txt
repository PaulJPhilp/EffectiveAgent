# ChatMemoryService Architecture Document

**Version:** 1.0
**Date:** 2024-07-26

## 1. Overview

This document describes the internal architecture of the `ChatMemoryService`. This service is responsible for managing the persistence and retrieval of conversational history within the Effect-based agent framework. It provides an abstraction over the `RepositoryService` (backed by Drizzle/Postgres) to handle individual chat messages and associated summarization metadata, scoped by a `conversationId`. It incorporates configurable strategies for managing history length, starting with periodic summarization using the `SkillService`.

## 2. Core Responsibilities

*   Provide Effect-native methods to `addMessages`, `getMessages`, and `clearMessages` for a specific `conversationId`.
*   Store individual chat messages (`ChatMessageEntityData`) via `RepositoryService`.
*   Retrieve ordered sequences of chat messages (including summaries) for a `conversationId`.
*   Optionally manage conversation history length using injected strategies (e.g., `SummarizationStrategy`).
*   Orchestrate the summarization process when triggered by the strategy:
    *   Interact with `SkillService` to generate summaries.
    *   Store summarization metadata (`SummarizationMetadataEntityData`) via `RepositoryService`.
    *   Store summary messages (`ChatMessageEntityData` with `role: 'summary'`) via `RepositoryService`, linking them to the metadata.
    *   Optionally delete original summarized messages.
*   Map errors from dependencies (`RepositoryService`, `SkillService`) to specific `ChatMemoryService` errors.
*   Integrate with `LoggingService`.

## 3. Key Components and Data Structures

*   **`IChatMemoryService` (Interface / `Effect.Tag`)**:
    *   Defines the public contract (`addMessages`, `getMessages`, `clearMessages`).
    *   Identified by the `ChatMemoryService` tag.
*   **`ChatMemoryServiceLive` (Implementation)**:
    *   Concrete implementation of `IChatMemoryService`.
    *   Orchestrates interactions between `RepositoryService`, `SkillService` (via strategy), and `LoggingService`.
    *   Depends on `ILoggingService`, `IRepositoryService<ChatMessageEntityData>`, `IRepositoryService<SummarizationMetadataEntityData>`, and an instance of `MemoryManagementStrategy`.
*   **`ChatMessageEntityData` (Data Structure / Zod Schema)**:
    *   Defines the structure for individual messages stored via `RepositoryService`.
    *   Fields: `conversationId`, `role`, `content`, `timestamp`, `metadata` (optional, used for `summaryMetadataId` link).
*   **`SummarizationMetadataEntityData` (Data Structure / Zod Schema)**:
    *   Defines the structure for metadata about a summarization event.
    *   Fields: `conversationId`, `summarizedMessageIds`, `summaryMessageId` (optional, updated after summary message creation), `timestampRange`.
*   **`MemoryManagementStrategy` (Interface)**:
    *   Defines the contract for history management logic, primarily the `postAddMessagesHook`.
    *   Implementations (e.g., `SummarizationStrategy`, `NoopMemoryStrategy`) are injected into `ChatMemoryServiceLive`.
*   **`SummarizationStrategy` (Implementation)**:
    *   Implements `MemoryManagementStrategy`.
    *   Contains the logic for checking thresholds, fetching messages, calling `SkillService`, creating/updating metadata and summary messages, and optionally deleting originals.
    *   Requires dependencies: `SkillService`, `RepositoryService` (for both entity types), `LoggingService`, and configuration.

## 4. Core Logic Flows

*   **`addMessages(params)`**:
    1.  Receive `conversationId`, `messages`.
    2.  Acquire logger.
    3.  Map input `ChatMessage` array to `ChatMessageEntityData` array, assigning `conversationId` and `timestamp`.
    4.  **Persist Messages:** Call `repository.create` for each message entity (potentially in parallel using `Effect.all`). Map `RepositoryError`/`DataValidationError` to `GenericMemoryError`/`DataValidationError`.
    5.  **Trigger Strategy Hook:**
        *   Determine the total message count for the `conversationId` *after* adding (requires a potentially separate `repository.count` or efficient `find`).
        *   Call `strategy.postAddMessagesHook` with `conversationId`, `addedMessagesCount`, `totalMessagesCount`.
        *   The hook execution (e.g., summarization) happens within the strategy implementation. Errors from the hook are handled/logged by the strategy (potentially configured not to fail the main `addMessages` flow).
    6.  Log success.
    7.  Return `Effect.void`.
*   **`getMessages(params)`**:
    1.  Receive `conversationId`, `limit`, `before`.
    2.  Acquire logger.
    3.  **Check Existence (Optional but Recommended):** Perform an initial quick check (e.g., `repository.find` with limit 1) to see if *any* messages exist for the `conversationId` to fail early with `ConversationNotFoundError`.
    4.  **Fetch Messages:** Call `repository.find` for `ChatMessageEntityData` with criteria `{ conversationId }`, applying sorting (by `timestamp`), `limit`, and `before` filtering (requires repository support). Map `RepositoryError` to `GenericMemoryError`.
    5.  **If Found:**
        *   Map the resulting `ChatMessageEntity` array to a `ChatMessage` array (preserving `metadata`).
        *   Ensure correct chronological order.
        *   Return `Effect.succeed(ReadonlyArray<ChatMessage>)`.
    6.  **If Not Found (after existence check):** Return `Effect.fail(new ConversationNotFoundError(...))`.
*   **`clearMessages(params)`**:
    1.  Receive `conversationId`.
    2.  Acquire logger.
    3.  **Find Entities:**
        *   Find all `ChatMessageEntity` IDs for the `conversationId` using `repository.find`.
        *   Find all `SummarizationMetadataEntity` IDs for the `conversationId` using `repository.find`.
    4.  **Check Existence:** If both finds return empty arrays, fail with `ConversationNotFoundError`.
    5.  **Delete Entities:**
        *   Call `repository.delete` for each found message ID.
        *   Call `repository.delete` for each found metadata ID.
        *   (Execute deletes potentially in parallel using `Effect.all`). Map errors to `GenericMemoryError`.
    6.  Log success.
    7.  Return `Effect.void`.
*   **`SummarizationStrategy.postAddMessagesHook(params)` (Internal Flow)**:
    1.  Receive `conversationId`, `totalMessagesCount`, etc.
    2.  Acquire logger.
    3.  **Check Threshold:** Determine if summarization is needed based on `totalMessagesCount` and internal state/configuration (e.g., count since last summary).
    4.  **If Needed:**
        *   Fetch the specific range of `ChatMessageEntity` to summarize using `messageRepository.find`.
        *   Format message content for `SkillService`.
        *   Create and save `SummarizationMetadataEntityData` (without `summaryMessageId`) using `metadataRepository.create`.
        *   Call `skillService.executeSkill`. Map errors to `GenericMemoryError`.
        *   Create `ChatMessageEntityData` for the summary (role='summary', content=skill output, metadata={summaryMetadataId}).
        *   Save the summary message using `messageRepository.create`.
        *   Update the previously created `SummarizationMetadataEntityData` with the `summaryMessageId` using `metadataRepository.update`.
        *   (Optional) Delete original messages using `messageRepository.delete` based on IDs stored in metadata.
        *   Update conversation summarization state (mechanism TBD).
        *   Log success/failure of summarization steps.
    5.  Return `Effect.void` (or potentially `GenericMemoryError` if configured to propagate).

## 5. Interaction with Dependencies

*   **`RepositoryService<ChatMessageEntityData>`:** Used by `ChatMemoryServiceLive` and `SummarizationStrategy` for CRUD operations on chat messages.
*   **`RepositoryService<SummarizationMetadataEntityData>`:** Used by `SummarizationStrategy` for CRUD operations on summarization metadata.
*   **`SkillService`:** Used by `SummarizationStrategy` to execute the configured summarization skill.
*   **`LoggingService`:** Used by the service and the strategy for logging.
*   **`ConfigurationService`:** Used (likely during Layer creation) to read strategy configuration (`type`, `summarizeEveryN`, `skillId`, etc.).

## 6. Error Handling

*   Errors from `RepositoryService` (`EntityNotFoundError`, `DataValidationError`, `RepositoryError`) and `SkillService` (`SkillExecutionError`, etc.) are caught and mapped to specific `ChatMemoryService` errors (`ConversationNotFoundError`, `DataValidationError`, `GenericMemoryError`).
*   Errors within the `postAddMessagesHook` (summarization) are handled within the strategy. By default, they should be logged but might not fail the parent `addMessages` call, though this could be configurable.

## 7. Configuration Management

*   Relies on `ConfigurationService` to determine which `MemoryManagementStrategy` implementation to use and to provide configuration parameters to that strategy (e.g., `summarizeEveryN`, `skillId`).
*   Relies on the configuration of the injected `RepositoryService` Layers.

## 8. Data Model

*   Two primary persisted entities: `ChatMessageEntityData` and `SummarizationMetadataEntityData`.
*   Messages are linked by `conversationId` and ordered by `timestamp`.
*   Summary messages (`role: 'summary'`) contain a link (`metadata.summaryMetadataId`) to the corresponding `SummarizationMetadataEntityData`.
*   `SummarizationMetadataEntityData` contains links (`summarizedMessageIds`) to the original messages it represents.
