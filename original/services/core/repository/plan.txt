# Repository Service Implementation Plan

This plan outlines the steps to implement the Repository Service, its different backend implementations, and associated components.

## Phase 1: Core Definition & Setup

1.  **Define `IRepositoryService` Interface:**
    *   Create `src/shared/services/repository/types/repository-service.ts`.
    *   Define the core CRUD methods (e.g., `create`, `findById`, `find`, `update`, `delete`).
    *   Make the interface generic (`<T extends BaseEntity>`) to support various entity types.
    *   Define a basic `BaseEntity` interface (`src/shared/services/repository/types/entities/base-entity.ts`) with common fields (`id`, `createdAt`, `updatedAt`).

2.  **Define `RepositoryService` Tag:**
    *   In `src/shared/services/repository/types/repository-service.ts`, create the `Context.Tag` extending the `IRepositoryService`.

3.  **Define Base Repository Errors:**
    *   Create `src/shared/services/repository/errors/repository-error.ts` (base error).
    *   Create common specific errors (e.g., `EntityNotFoundError`, `DataValidationError`) extending the base error.

## Phase 2: Local (In-Memory) Implementation

1.  **Implement `RepositoryServiceLocal`:**
    *   Create `src/shared/services/repository/impl/local/repository-service-local.ts`.
    *   Implement the `IRepositoryService` interface using in-memory Maps or Arrays.
    *   Handle basic validation and error conditions.

2.  **Create `RepositoryServiceLocalLayer`:**
    *   In the same file or a dedicated layer file, create the Effect Layer that provides `RepositoryServiceLocal` for the `RepositoryService` Tag.

3.  **Write Tests:**
    *   Create `src/shared/services/repository/impl/local/__tests__/repository-service-local.test.ts`.
    *   Write unit tests covering all CRUD operations and edge cases for the local implementation.

## Phase 3: Drizzle ORM Implementation

1.  **Setup Drizzle (if not already done):**
    *   Ensure Drizzle ORM is configured with necessary schemas and database connection setup (potentially via a `DatabaseService`).

2.  **Implement `RepositoryServiceDrizzle`:**
    *   Create `src/shared/services/repository/impl/drizzle/repository-service-drizzle.ts`.
    *   Implement the `IRepositoryService` interface using Drizzle ORM functions.
    *   Map interface methods to Drizzle queries.
    *   Handle potential database errors and map them to `RepositoryError` types.

3.  **Create `RepositoryServiceDrizzleLayer`:**
    *   Create the Effect Layer, potentially depending on the `DatabaseService` layer.

4.  **Write Tests:**
    *   Create `src/shared/services/repository/impl/drizzle/__tests__/repository-service-drizzle.test.ts`.
    *   Write integration tests (potentially requiring a test database setup) for the Drizzle implementation.

## Phase 4: Refinement & Documentation

1.  **Review and Refactor:** Ensure consistency, error handling, and adherence to best practices across all implementations.
2.  **Add JSDoc:** Document interfaces, public methods, and complex logic. 