# Service Hierarchy Guidelines

## Layered Service Architecture

This codebase enforces a layered service hierarchy to ensure separation of concerns, maintainability, and clear dependency direction. Each service must belong to exactly one layer:

### 1. Core Services
- Provide foundational, reusable technical capabilities (e.g., file system, logging, configuration, cache, scheduler, metrics).
- Stateless when possible, minimal dependencies.
- No business logic.

### 2. Business Services
- Implement domain-specific or workflow logic (e.g., agent, prompt, skill, workflow, memory).
- May depend on core services, but not on infrastructure or other business services unless justified by domain boundaries.
- Stateful if required, clear bounded contexts.

### 3. Infrastructure Services
- Integrate with external systems (e.g., database, messaging, HTTP, AI providers, storage).
- Abstract third-party or platform concerns, manage connections, retries, etc.
- May depend on core services.

### 4. Cross-Cutting Services
- Provide concerns used across all layers (e.g., authentication, monitoring, validation, error handling, security).
- Used by multiple layers, configuration-driven, aspect-oriented.

## Allowed Dependencies

- **Core**: May depend only on other core services.
- **Business**: May depend on core services.
- **Infrastructure**: May depend on core services.
- **Cross-cutting**: May depend on core services.
- **No layer may depend on business or infrastructure from core.**

## Best Practices

- Register each service in the appropriate layer.
- Respect dependency direction: Core < Business < Infrastructure; Cross-cutting can be used by any.
- Avoid circular dependencies between services or layers.
- Keep each service responsibility focused and aligned with its layer.
- Separate unrelated concerns into distinct services.

## Anti-patterns (Hierarchy Only)

- Skipping layers (e.g., business using infrastructure directlyâ€”always go through core/repository).
- Circular dependencies between services or layers.
- Mixing unrelated responsibilities in a single service.
2. Service Registration
```typescript
// DO: Register services in appropriate layers
const CoreLayer = Layer.merge(
  FileSystemLive,
  ConfigurationLive,
  LoggingLive
)

const BusinessLayer = Layer.provide(
  Layer.merge(
    AgentLive,
    PromptLive,
    SkillLive
  ),
  CoreLayer
)
```

3. Cross-Cutting Concerns
```typescript
// DO: Use cross-cutting services consistently
class BaseService extends Effect.Service<BaseServiceApi>() {
  constructor(
    protected readonly auth: AuthenticationService,
    protected readonly monitoring: MonitoringService
  ) {}
}

// DO: Extend base service
class BusinessService extends BaseService {
  // Inherits auth and monitoring
}
```

## Service Organization Rules

1. File Structure
```
src/
  core/
    filesystem/
    config/
    logging/
  business/
    agent/
    prompt/
    skill/
  infrastructure/
    database/
    messaging/
    http/
  cross-cutting/
    auth/
    monitoring/
    validation/
```

2. Naming Conventions
- Services: PascalCase with 'Service' suffix
- Directories: kebab-case
- Files: kebab-case
- Interfaces: PascalCase with 'Api' suffix

3. Documentation Requirements
- Service purpose and responsibility
- Dependencies and their justification
- Configuration requirements
- Error handling approach
- Usage examples

## Anti-patterns to Avoid

1. Layer Violations
```typescript
// DON'T: Skip layers
class BusinessService {
  constructor(
    private readonly database: DatabaseService // WRONG! Should use repository
  ) {}
}
```

2. Circular Dependencies
```typescript
// DON'T: Create circular references
interface ServiceA extends ServiceB {}
interface ServiceB extends ServiceA {} // WRONG!
```

3. Mixed Responsibilities
```typescript
// DON'T: Mix concerns
class UserService {
  // WRONG! Separate into different services
  async authenticateUser() {}
  async updateUserProfile() {}
  async sendUserEmail() {}
}
```

## Service Implementation Checklist

- [ ] Service placed in correct layer
- [ ] Dependencies follow layer rules
- [ ] Cross-cutting concerns properly utilized
- [ ] Error handling implemented
- [ ] Monitoring integrated
- [ ] Documentation complete
- [ ] Tests written
- [ ] Configuration externalized
- [ ] Proper error types defined
- [ ] Layer-appropriate interfaces exposed 