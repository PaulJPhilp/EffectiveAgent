---
description: Rules for using Effect generators in TypeScript
globs: **/*.ts
---

# Effect Generator Rules

## No Adapter Pattern
- NEVER use the (_) adapter pattern in Effect.gen functions
- This pattern is an anti-pattern that adds unnecessary complexity
- Access Effect services and functions directly

### Examples

❌ BAD:
```typescript
Effect.gen(function* (_) {
  const fs = yield* _(FileSystem)
  const exists = yield* _(fs.exists(path))
  const config = yield* _(configLoader.loadConfig(path))
})
```

✅ GOOD:
```typescript
Effect.gen(function* () {
  const exists = yield* FileSystem.exists(path)
  const config = yield* configLoader.loadConfig(path)
})
```

## Direct Service Access
- Access services directly through their Tag
- Don't store service instances in variables
- Use service methods directly with yield*

### Examples

❌ BAD:
```typescript
Effect.gen(function* (_) {
  const logger = yield* _(LoggerService)
  yield* _(logger.info("message"))
})
```

✅ GOOD:
```typescript
Effect.gen(function* () {
  yield* LoggerService.info("message")
})
```

## Error Handling
- Use Effect.fail directly
- Don't wrap yields in try/catch
- Let Effect handle error propagation

### Examples

❌ BAD:
```typescript
Effect.gen(function* (_) {
  try {
    const result = yield* _(riskyOperation)
  } catch (e) {
    yield* _(Effect.fail(e))
  }
})
```

✅ GOOD:
```typescript
Effect.gen(function* () {
  const result = yield* riskyOperation
}).pipe(
  Effect.mapError(e => new DomainError(e))
)
``` 