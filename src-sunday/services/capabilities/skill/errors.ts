/**
 * @file Defines errors specific to the Skill service.
 */

import type { ZodError, z } from "zod"; // Import Zod types
import { AppError } from "../../errors.js"; // Import global base error

/** Base error for Skill service operations. */
export class SkillError extends AppError {
    constructor(params: {
        skillName?: string;
        message: string;
        cause?: unknown;
        context?: Record<string, unknown>;
    }) {
        super({
            message: `Skill Error${params.skillName ? ` (${params.skillName})` : ''}: ${params.message}`,
            cause: params.cause,
            context: { ...params.context, skillName: params.skillName, errorType: "SkillError" },
        });
    }
}

/** Error occurring during the execution of a Skill (e.g., AI call failure, tool failure). */
export class SkillExecutionError extends SkillError {
    constructor(params: { skillName: string; message: string; cause?: unknown; context?: Record<string, unknown> }) {
        super({
            skillName: params.skillName,
            message: `Execution failed: ${params.message}`,
            cause: params.cause,
            context: { ...params.context, errorType: "SkillExecutionError" },
        });
    }
}

/** Error occurring during input validation against a Skill's inputSchema. */
export class SkillInputValidationError extends SkillError {
    readonly zodError?: ZodError;
    constructor(params: { skillName: string; message?: string; cause?: ZodError | unknown }) {
        super({
            skillName: params.skillName,
            message: params.message ?? `Invalid input provided.`,
            cause: params.cause,
            context: {
                errorType: "SkillInputValidationError",
                issues: params.cause instanceof z.ZodError ? params.cause.errors : undefined,
            },
        });
        if (params.cause instanceof z.ZodError) { this.zodError = params.cause; }
    }
}

/** Error occurring during output validation against a Skill's outputSchema. */
export class SkillOutputValidationError extends SkillError {
    readonly zodError?: ZodError;
    constructor(params: { skillName: string; message?: string; cause?: ZodError | unknown }) {
        super({
            skillName: params.skillName,
            message: params.message ?? `Invalid output generated by skill.`,
            cause: params.cause,
            context: {
                errorType: "SkillOutputValidationError",
                issues: params.cause instanceof z.ZodError ? params.cause.errors : undefined,
            },
        });
        if (params.cause instanceof z.ZodError) { this.zodError = params.cause; }
    }
}

export class SkillConfigurationError extends AppError {
    constructor(params: { message: string; skillName?: string; cause?: unknown }) {
        super({
            message: `Skill Configuration Error${params.skillName ? ` ('${params.skillName}')` : ''}: ${params.message}`,
            cause: params.cause,
            context: { skillName: params.skillName, errorType: "SkillConfigurationError" }
        });
    }
}

export class SkillNotFoundError extends SkillConfigurationError {
    constructor(params: { skillName: string; message?: string }) {
        super({
            skillName: params.skillName,
            message: params.message ?? "Skill definition not found",
        });
    }
}
