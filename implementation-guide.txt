# Agent Service Implementation Guide

## 1. IExecutorService

```typescript
interface IExecutorService {
  getConfig(): AgentConfig;
  execute<TInput = unknown, TOutput = unknown>(
    input: TInput
  ): Promise<AgentState<TInput, TOutput>>;
}
```

## 2. LangGraphExecutor

```typescript
class LangGraphExecutor implements IExecutorService {
  private config: AgentConfig;

  constructor(config: AgentConfig) {
    this.config = config;
  }

  getConfig(): AgentConfig {
    return this.config;
  }

  async execute<TInput = unknown, TOutput = unknown>(
    input: TInput
  ): Promise<AgentState<TInput, TOutput>> {
    // Implementation using LangGraph
    // ...
  }
}
```

## 3. AgentGraph

```typescript
class AgentGraph {
  private executors: Map<string, IExecutorService> = new Map();
  private services: AgentServices;

  constructor(services: AgentServices) {
    this.services = services;
  }

  async createGraph(config: AgentConfig): Promise<void> {
    if (this.executors.has(config.id)) {
      throw new Error(`Graph already exists: ${config.id}`);
    }
    
    const executor = new LangGraphExecutor(config);
    this.executors.set(config.id, executor);
  }

  // Other methods...
}
```

## 4. AgentService

```typescript
class AgentService implements IAgentService {
  private agentGraph: AgentGraph;
  
  constructor(services: AgentServices) {
    this.agentGraph = new AgentGraph(services);
  }

  async createAgent(config: AgentConfig): Promise<AgentState> {
    await this.agentGraph.createGraph(config);
    // ...
  }

  // Other methods...
}
```

## Testing Strategy

1. **Unit Tests**
   - Test each class in isolation
   - Mock dependencies for controlled testing
   - Focus on specific behaviors

2. **Integration Tests**
   - Test interactions between components
   - Verify proper flow of data and control

3. **End-to-End Tests**
   - Test full agent execution flow
   - Verify real agent execution scenarios

## Implementation Notes

- Keep the implementation simple
- Focus on clean interfaces
- Ensure proper error handling
- Document public methods and interfaces 