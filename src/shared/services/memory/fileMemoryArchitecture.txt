# FileService Architecture Document

**Version:** 1.0
**Date:** 2024-07-26

## 1. Overview

This document describes the internal architecture of the `FileService`. This service manages the persistence of file metadata and file content within the Effect-based agent framework. It provides an abstraction layer over the `RepositoryService` (for metadata) and a configurable content storage backend (initially database blobs, planned for cloud storage). It handles uploads, downloads, metadata retrieval, and reference counting for garbage collection.

## 2. Core Responsibilities

*   Provide Effect-native methods to `uploadFile`, `getFileMetadata`, `getFileStream`, `listFiles`, `incrementReferenceCount`, and `decrementReferenceCount`.
*   Store and manage file metadata (`FileMetadataEntityData`) using `RepositoryService`.
*   Store and retrieve file content using a configurable **Content Storage Backend**.
*   Ensure file metadata and access are scoped by `UserId`.
*   Manage file `referenceCount` atomically (if possible via backend).
*   Orchestrate file deletion (content and metadata) when `referenceCount` reaches zero after a decrement.
*   Map errors from dependencies (`RepositoryService`, Content Storage Backend) to specific `FileService` errors.
*   Integrate with `LoggingService` and `ConfigurationService`.

## 3. Key Components and Data Structures

*   **`IFileService` (Interface / `Effect.Tag`)**:
    *   Defines the public contract (`uploadFile`, `getFileMetadata`, etc.).
    *   Identified by the `FileService` tag.
*   **`FileServiceLive` (Implementation)**:
    *   Concrete implementation of `IFileService`.
    *   Orchestrates interactions between `RepositoryService`, the Content Storage Backend, and `LoggingService`.
    *   Depends on `ILoggingService`, `IRepositoryService<FileMetadataEntityData>`, `ConfigurationService`, and an instance of `IContentStorage`.
*   **`FileMetadataEntityData` (Data Structure / Zod Schema)**:
    *   Defines the structure for file metadata stored via `RepositoryService`.
    *   Fields: `filename`, `mimeType`, `sizeBytes`, `userId`, `referenceCount`, `storageLocation`, `storageRef`.
*   **`FileMetadata` (Interface/Type)**:
    *   Public representation of file metadata returned by API methods. Excludes internal storage details (`storageLocation`, `storageRef`).
*   **`IContentStorage` (Internal Interface/Abstraction)**:
    *   An internal interface defining the contract for interacting with the actual file content storage backend (e.g., DB Blob store, S3 store).
    *   Methods likely include: `store(contentStream: Readable): Effect<{ storageRef: string, sizeBytes: number }, FileStorageError>`, `retrieve(storageRef: string): Effect<Readable, FileStorageError>`, `delete(storageRef: string): Effect<void, FileStorageError>`.
    *   The specific implementation (e.g., `DatabaseContentStorage`, `S3ContentStorage`) is chosen based on configuration and injected into `FileServiceLive`.
*   **Content Storage Implementations** (e.g., `DatabaseContentStorage`, `S3ContentStorage`):
    *   Concrete classes implementing `IContentStorage`.
    *   Contain the specific logic for interacting with the chosen backend (DB queries for blobs, S3 SDK calls).

## 4. Core Logic Flows

*   **`uploadFile(params)`**:
    1.  Receive `userId`, `filename`, `mimeType`, `contentStream`.
    2.  Acquire logger. Validate input parameters (`DataValidationError`).
    3.  Get configured `IContentStorage` instance.
    4.  **Store Content:** Call `contentStorage.store(contentStream)`. This streams the content to the backend and returns the `storageRef` (e.g., content entity ID or S3 key) and calculated `sizeBytes`. Map errors to `FileStorageError`.
    5.  **Create Metadata:** Prepare `FileMetadataEntityData` using input params, results from step 4 (`storageRef`, `sizeBytes`), the configured `storageLocation`, and `referenceCount: 0`.
    6.  Call `repository.create(metadata)`. Map errors to `FileStorageError`.
    7.  Extract the `id` (fileId) from the created metadata entity.
    8.  Construct and return public `FileMetadata`.
    9.  Log success.
*   **`getFileMetadata(params)`**:
    1.  Receive `fileId`.
    2.  Acquire logger.
    3.  Call `repository.findById({ id: fileId })`.
    4.  If found, map `FileMetadataEntity` to public `FileMetadata` type. Return `Effect.succeed`.
    5.  If not found (`EntityNotFoundError`), map to `FileNotFoundError`.
    6.  Map other `RepositoryError` to `FileStorageError`.
*   **`getFileStream(params)`**:
    1.  Receive `fileId`.
    2.  Acquire logger.
    3.  **Get Metadata:** Call internal logic equivalent to `getFileMetadata`. Handle `FileNotFoundError` / `FileStorageError`.
    4.  Extract `storageLocation` and `storageRef` from the metadata.
    5.  Get configured `IContentStorage` instance matching `storageLocation`.
    6.  **Retrieve Content:** Call `contentStorage.retrieve(storageRef)`. Map errors to `FileStorageError`.
    7.  Return the `ReadableStream` Effect.
*   **`listFiles(params)`**:
    1.  Receive `userId`.
    2.  Acquire logger.
    3.  Call `repository.find({ userId })`. Map `RepositoryError` to `FileStorageError`.
    4.  Map the resulting array of `FileMetadataEntity` to an array of public `FileMetadata`.
    5.  Return `Effect.succeed(ReadonlyArray<FileMetadata>)`.
*   **`incrementReferenceCount(params)`**:
    1.  Receive `fileId`.
    2.  Acquire logger.
    3.  **Requires Atomic Update:** Ideally, call a specialized `repository.incrementField(fileId, 'referenceCount', 1)` method if `RepositoryService` supports it.
    4.  **Fallback (Non-Atomic):**
        *   Call `repository.findById({ id: fileId })`. Handle not found (`FileNotFoundError`) / repo errors (`FileStorageError`).
        *   Calculate `newCount = currentCount + 1`.
        *   Call `repository.update(fileId, { referenceCount: newCount })`. Handle potential errors (`FileStorageError`). *This has race conditions.*
    5.  Log success. Return `Effect.void`.
*   **`decrementReferenceCount(params)`**:
    1.  Receive `fileId`.
    2.  Acquire logger.
    3.  **Requires Atomic Update & Retrieve:** Ideally, call a specialized `repository.decrementFieldAndGet(fileId, 'referenceCount', 1)` method.
    4.  **Fallback (Non-Atomic):**
        *   Call `repository.findById({ id: fileId })`. Handle not found (`FileNotFoundError`) / repo errors (`FileStorageError`).
        *   If `currentCount <= 0`, fail with `InvalidReferenceOperationError`.
        *   Calculate `newCount = currentCount - 1`.
        *   Call `repository.update(fileId, { referenceCount: newCount })`. Handle potential errors (`FileStorageError`). *This has race conditions.*
    5.  **Check for Deletion:** If `newCount <= 0` (based on result from atomic operation or the update call):
        *   Get `storageLocation` and `storageRef` from the metadata retrieved earlier (or fetch again if needed).
        *   Get configured `IContentStorage` instance.
        *   **Delete Content:** Call `contentStorage.delete(storageRef)`. Log errors but potentially continue. Map errors to `FileStorageError` (or just log).
        *   **Delete Metadata:** Call `repository.delete(fileId)`. Map errors to `FileStorageError`. Handle `EntityNotFoundError` defensively (maybe already deleted).
        *   Log deletion process.
    6.  Log success (decrement successful, deletion may have occurred). Return `Effect.void`.

## 5. Interaction with Dependencies

*   **`RepositoryService<FileMetadataEntityData>`:** Used for all CRUD operations on file metadata. Needs to support the required query/update patterns (ideally atomic increments/decrements).
*   **`IContentStorage` (Internal Abstraction):** The `FileServiceLive` interacts with this interface to store/retrieve/delete file content. The specific implementation (`DatabaseContentStorage`, `S3ContentStorage`, etc.) is injected based on configuration.
*   **`LoggingService`:** Used for logging all operations and errors.
*   **`ConfigurationService`:** Used to determine the `storage.type` and provide necessary configuration (e.g., table names, bucket names) to the selected `IContentStorage` implementation and potentially to `RepositoryService`.

## 6. Error Handling

*   Errors from `RepositoryService` and `IContentStorage` implementations are mapped to specific `FileService` errors (`FileNotFoundError`, `FileStorageError`, `DataValidationError`, `InvalidReferenceOperationError`).
*   Deletion logic during `decrementReferenceCount` needs careful error handling to ensure cleanup attempts are made even if one part fails (e.g., log content deletion failure but still attempt metadata deletion).

## 7. Configuration Management

*   `ConfigurationService` dictates the content storage backend (`fileService.storage.type`) and provides backend-specific settings.
*   The `FileServiceLive` Layer uses this configuration to instantiate and inject the correct `IContentStorage` implementation.

## 8. Data Model

*   Metadata (`FileMetadataEntityData`) is stored relationally via `RepositoryService`.
*   Content is stored via the `IContentStorage` abstraction (initially DB blob, later potentially object storage).
*   The link between metadata and content is the `storageRef` field in the metadata, which corresponds to an identifier meaningful to the specific `IContentStorage` implementation (e.g., a primary key in a content table, an S3 object key).
*   `referenceCount` in metadata tracks usage.
