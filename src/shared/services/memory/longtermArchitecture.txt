# LongTermMemoryService Architecture Document

**Version:** 1.0
**Date:** 2024-07-26

## 1. Overview

This document describes the internal architecture of the `LongTermMemoryService`. This service provides an abstraction layer over the `RepositoryService` to manage persistent, user-scoped, key-value like data entries. It allows agents and other services to store and retrieve user preferences and knowledge across conversation boundaries.

## 2. Core Responsibilities

*   Provide Effect-native methods to `set` (create or update), `get`, `list`, and `delete` user-specific memory entries.
*   Ensure all operations are scoped by `UserId`.
*   Identify individual entries using a combination of `UserId` and a unique `key`.
*   Translate `LongTermMemoryService` API calls into appropriate `RepositoryService` operations (find, create, update, delete) on a specific data entity (`UserMemoryEntryData`).
*   Map errors from the `RepositoryService` to specific, typed errors relevant to long-term memory operations.
*   Integrate with the `LoggingService` for observability.

## 3. Key Components and Data Structures

*   **`ILongTermMemoryService` (Interface / `Effect.Tag`)**:
    *   Defines the public contract (`set`, `get`, `list`, `delete`).
    *   Identified by the `LongTermMemoryService` tag.
*   **`LongTermMemoryServiceLive` (Implementation)**:
    *   Concrete implementation of `ILongTermMemoryService`.
    *   Contains the logic mapping service methods to `RepositoryService` calls.
    *   Depends on `ILoggingService` and `IRepositoryService<UserMemoryEntryData>`.
*   **`UserMemoryEntryData` (Data Structure / Zod Schema)**:
    *   Defines the structure of data persisted via `RepositoryService`.
    *   Key fields: `userId`, `key`, `value` (flexible type, e.g., `unknown`), `valueType` (optional hint), `metadata` (optional).
    *   `userId` and `key` together act as the logical unique identifier for an entry from the service's perspective. The underlying `RepositoryService` manages the actual primary `id`.
*   **`UserMemoryEntry` (Interface/Type)**:
    *   Represents the data structure returned by `get` and `list` operations, containing `key`, `value`, `valueType`, `metadata`.

## 4. Core Logic Flows

*   **`set(params)`**:
    1.  Receive `userId`, `key`, `value`, `valueType`, `metadata`.
    2.  Acquire logger.
    3.  **Check Existence:** Use `repository.find({ userId, key })` to search for an existing entry. Map `RepositoryError` to `GenericMemoryError`.
    4.  **If Found:**
        *   Extract the `id` of the existing entity.
        *   Prepare update data: `{ value, valueType, metadata }`.
        *   Call `repository.update(id, updateData)`.
        *   Map `RepositoryError`, `EntityNotFoundError` (unlikely but possible), `DataValidationError` to `GenericMemoryError`, `PreferenceNotFoundError`, `DataValidationError` respectively.
        *   Log success/failure.
    5.  **If Not Found:**
        *   Prepare full entity data: `{ userId, key, value, valueType, metadata }`.
        *   Call `repository.create(fullData)`.
        *   Map `RepositoryError`, `DataValidationError` to `GenericMemoryError`, `DataValidationError`.
        *   Log success/failure.
    6.  Return `Effect.void` on success.
    *   *Note:* This flow has a potential race condition between the `find` and `update`/`create` steps if executed concurrently for the same `userId`/`key`. An atomic `upsert` in `RepositoryService` or database constraints would mitigate this.
*   **`get(params)`**:
    1.  Receive `userId`, `key`.
    2.  Acquire logger.
    3.  Call `repository.find({ userId, key })`. Map `RepositoryError` to `GenericMemoryError`.
    4.  **If Found (exactly one expected):**
        *   Extract `data` from the first result entity.
        *   Construct and return `UserMemoryEntry` object: `{ key: data.key, value: data.value, valueType: data.valueType, metadata: data.metadata }`.
    5.  **If Not Found (empty array):**
        *   Log warning.
        *   Return `Effect.fail(new PreferenceNotFoundError(...))`.
*   **`list(params)`**:
    1.  Receive `userId`.
    2.  Acquire logger.
    3.  Call `repository.find({ userId })`. Map `RepositoryError` to `GenericMemoryError`.
    4.  Map the resulting array of `UserMemoryEntryEntity` to an array of `UserMemoryEntry` objects.
    5.  Return `Effect.succeed(ReadonlyArray<UserMemoryEntry>)`.
*   **`delete(params)`**:
    1.  Receive `userId`, `key`.
    2.  Acquire logger.
    3.  **Check Existence & Get ID:** Call `repository.find({ userId, key })`. Map `RepositoryError` to `GenericMemoryError`.
    4.  **If Found:**
        *   Extract the `id` of the entity.
        *   Call `repository.delete(id)`.
        *   Map `RepositoryError`, `EntityNotFoundError` (unlikely) to `GenericMemoryError`, `PreferenceNotFoundError`.
        *   Log success.
        *   Return `Effect.void`.
    5.  **If Not Found:**
        *   Log warning.
        *   Return `Effect.fail(new PreferenceNotFoundError(...))`.

## 5. Interaction with Dependencies

*   **`RepositoryService<UserMemoryEntryData>`:**
    *   The primary dependency. Used for all CRUD operations (`create`, `find`, `update`, `delete`) on `UserMemoryEntryData` entities.
    *   The `LongTermMemoryServiceLive` Layer requires a Layer providing `IRepositoryService<UserMemoryEntryData>` (e.g., configured for Drizzle/SQLite or Drizzle/Postgres targeting the appropriate schema).
*   **`LoggingService`:**
    *   Used within all core methods to log operations, successes, warnings (e.g., not found), and errors. Context should include `userId`, `key`, and `service: "LongTermMemoryService"`. Sensitive `value` data should generally not be logged.

## 6. Error Handling

*   Errors are handled using Effect's error channel.
*   Specific error types (`DataValidationError`, `PreferenceNotFoundError`, `GenericMemoryError`) are returned.
*   Errors originating from `RepositoryService` (`EntityNotFoundError`, `DataValidationError`, `RepositoryError`) are caught and mapped to the corresponding `LongTermMemoryService` error types.
*   `PreferenceNotFoundError` specifically indicates that a `get` or `delete` operation targeted a `userId`/`key` combination that does not exist.

## 7. Configuration Management

*   Relies primarily on the configuration of the injected `RepositoryService` Layer (database connection strings, etc.).
*   May optionally use `ConfigurationService` to read a specific key defining the entity type or table name prefix (e.g., `memory.longterm.repository.entityType`) if the `RepositoryService` implementation requires it for disambiguation.

## 8. Data Model

*   The core persisted entity is `UserMemoryEntryData`.
*   Each record represents a single piece of memory for a specific user.
*   The combination of `userId` and `key` serves as the logical primary key for accessing entries via the service. The actual database primary key (`id`) is managed internally by the `RepositoryService`.
*   The `value` field is designed to be flexible (`unknown` or a union type). Responsibility for interpreting or validating the `value` upon retrieval may lie partly with the caller, potentially guided by the `valueType` field.
