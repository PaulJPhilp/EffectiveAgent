# SupervisorAgentService Architecture Document

**Version:** 1.0
**Date:** 2024-07-26

## 1. Overview

This document describes the internal architecture of the `SupervisorAgentService`. This specialized service within the `EffectiveAgent` framework acts as a high-level orchestrator and router for complex, multi-step tasks. It receives initial requests, uses internal logic (potentially an LLM-driven decision graph executed via a base `AgentService`) to plan and route sub-tasks, and directs worker chat threads (via `ChatThreadService`) to execute those sub-tasks. It manages the state of ongoing orchestrations and provides an API focused on task management rather than direct agent execution.

## 2. Core Responsibilities

*   Provide Effect-native APIs for managing high-level orchestrated tasks (`startOrchestration`, `getOrchestrationStatus`, `provideInputToOrchestration`).
*   Analyze incoming tasks and current orchestration state to determine the next action (e.g., delegate to worker thread, respond directly, request clarification).
*   Interact with `ChatThreadService` to create, branch, submit messages to, subscribe to, monitor, and potentially kill worker chat threads representing specialized agents or tasks.
*   Utilize `ModelProviderService` and `PromptService` for internal decision-making and routing logic.
*   Manage and persist the state of ongoing orchestrations (potentially using `LongTermMemoryService`).
*   Aggregate results from worker threads or other steps to produce a final outcome for the orchestrated task.
*   Map errors from dependent services (`ChatThreadService`, `ModelProviderService`, `LongTermMemoryService`, internal `AgentService`) into specific `SupervisorAgentService` errors.
*   Integrate with `LoggingService`.

## 3. Key Components and Data Structures

*   **`ISupervisorAgentService` (Interface / `Effect.Tag`)**: Defines the public contract focused on orchestration (`startOrchestration`, etc.).
*   **`SupervisorAgentServiceLive` (Implementation)**: Concrete implementation. Contains the orchestration logic. Depends on `ILoggingService`, `IChatThreadService`, `IModelProviderService`, `IPromptService`, potentially `ILongTermMemoryService`, and potentially an internal `IAgentService` instance.
*   **`OrchestrationState` (Conceptual Internal Structure)**: Represents the state of a single ongoing orchestration managed by the Supervisor. This might include:
    *   `orchestrationId: string`
    *   `originalTaskInput: any`
    *   `currentStatus: string` (e.g., "Planning", "Running Research Thread", "Waiting for Writing Thread", "Combining Results", "Completed", "Failed")
    *   `activeThreadIds: Map<string, threadId>` (Mapping internal step names to active worker thread IDs).
    *   `intermediateResults: Map<string, any>`
    *   `userId: string` (For context)
    *   This state likely needs to be persisted, potentially using `LongTermMemoryService` keyed by `orchestrationId`.
*   **Internal `AgentService` Instance (Optional but Likely)**: The Supervisor's decision-making logic might itself be implemented as an agent graph (`AgentConfig`). `SupervisorAgentServiceLive` would contain or depend on an `IAgentService` instance configured with this specific graph to execute its routing/planning steps. The `run` method of this internal agent might be called by `startOrchestration` or subsequent steps.

## 4. Core Logic Flows (Conceptual Examples)

*   **`startOrchestration(params)`**:
    1.  Receive `taskInput`, `userId`.
    2.  Generate unique `orchestrationId`.
    3.  Initialize `OrchestrationState`.
    4.  Persist initial `OrchestrationState` (e.g., via `longTermMemoryService.set`).
    5.  **Initiate Decision Loop:** Trigger the Supervisor's internal logic. This might involve:
        *   Calling `run` on its internal `baseAgentRunner` with the `taskInput` and current (empty) state.
        *   The internal agent uses LLM (via Model/Prompt services) to decide the first step (e.g., "Start research thread").
    6.  **Execute First Step (Example: Start Worker Thread):**
        *   Based on the decision, call `chatThreadService.createThread` with the appropriate config for the worker (e.g., research agent config).
        *   Store the new `threadId` in the `OrchestrationState`.
        *   Update `OrchestrationState` status (e.g., "Running Research Thread"). Persist state update.
        *   Call `chatThreadService.processMessage` to send the relevant sub-task to the worker thread.
        *   Potentially start subscribing to the worker thread's output via `chatThreadService.subscribeToOutput`.
    7.  Return `{ orchestrationId }`.
*   **Handling Worker Thread Output (Internal - Triggered by Subscription)**:
    1.  Receive completion/error event from a worker thread's Hub subscription.
    2.  Load the relevant `OrchestrationState` using the `orchestrationId` (which needs to be associated with the subscription context).
    3.  Store the intermediate result or handle the error.
    4.  Update `OrchestrationState` status.
    5.  **Trigger Next Decision:** Feed the result/error back into the Supervisor's internal decision loop (e.g., call `run` on `baseAgentRunner` again with updated state).
    6.  The loop decides the next step (e.g., "Start writing thread", "Ask user for clarification", "Report final result").
    7.  Execute the next step (similar to step 6 in `startOrchestration`).
    8.  Persist `OrchestrationState` updates.
*   **`getOrchestrationStatus(params)`**:
    1.  Receive `orchestrationId`.
    2.  Load `OrchestrationState` from persistent storage (e.g., `longTermMemoryService.get`). Handle not found error.
    3.  Return the `currentStatus` field (or a more detailed status object).
*   **`provideInputToOrchestration(params)`**:
    1.  Receive `orchestrationId`, `input`.
    2.  Load `OrchestrationState`. Handle not found error.
    3.  Feed the new `input` into the Supervisor's internal decision loop (e.g., call `run` on `baseAgentRunner`).
    4.  Proceed based on the decision loop's output (update state, interact with threads, etc.).

## 5. Interaction with Dependencies

*   **`ChatThreadService`:** Used extensively to manage the lifecycle (create, branch, kill), interaction (`processMessage`), and monitoring (`subscribeToOutput`, `getStatus`) of worker threads.
*   **`ModelProviderService` / `PromptService`:** Used by the Supervisor's internal decision-making logic (likely via its internal `AgentService` instance) to interpret tasks and decide on routing/next steps.
*   **`LongTermMemoryService` (Likely):** Used to persist and retrieve the `OrchestrationState` associated with each ongoing task.
*   **`AgentService` (Internal):** Potentially used to execute the Supervisor's own decision-making graph.
*   **`LoggingService`:** Used for logging orchestration steps, decisions, errors, and interactions with other services.
*   **`SkillService` (Optional):** The Supervisor might directly call skills if its decision logic determines a simple tool use is sufficient instead of delegating to a worker thread.

## 6. Error Handling

*   Defines orchestration-specific errors (`OrchestrationError`, `RoutingError`, `OrchestrationNotFoundError`).
*   Catches and potentially maps errors from all dependent services (`ChatThreadService`, `ModelProviderService`, `LongTermMemoryService`, internal `AgentService`).
*   Errors from worker threads are received via the subscription mechanism and fed back into the decision loop for handling (e.g., retry, alternative path, fail orchestration).
*   Failures in persisting orchestration state 
