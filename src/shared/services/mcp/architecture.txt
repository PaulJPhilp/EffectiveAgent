# MCPClientService Architecture Document

**Version:** 1.0
**Date:** 2024-07-26

## 1. Overview

This document describes the internal architecture of the `MCPClientService` within the Effect-based agent framework. The service is responsible for managing the lifecycle (registration, initialization) and providing access to configured Multi-Channel Platform (MCP) clients (e.g., interfaces to Gmail, HubSpot, GitHub APIs). It abstracts the complexities of configuration fetching, validation, and client initialization, offering a consistent Effect-native interface for agent authors.

## 2. Core Responsibilities

*   Maintain a registry of available `MCPClient` definitions.
*   Provide a mechanism to register new `MCPClient` definitions.
*   On request (`getClient`), locate the appropriate client definition.
*   Fetch and validate the necessary configuration for the requested client using the `ConfigurationService` and the client's defined Zod schema.
*   Execute the client's `initialize` function, providing necessary context (`MCPClientExecutionContext`) and validated configuration.
*   Return the initialized, ready-to-use client instance (or the object containing its methods).
*   Handle errors gracefully throughout the process (configuration issues, initialization failures, client not found).
*   Optionally cache initialized client instances to improve performance and avoid redundant setup.
*   Integrate with the `LoggingService` for observability.

## 3. Key Components and Data Structures

*   **`IMCPClientService` (Interface / `Effect.Tag`)**:
    *   Defines the public contract of the service (`registerClient`, `getClient`, `listClients`).
    *   Identified by the `MCPClientService` tag for dependency injection.
*   **`MCPClientServiceLive` (Implementation)**:
    *   The concrete implementation of `IMCPClientService`.
    *   Holds the internal state (registry, cache).
    *   Contains the logic for registration, retrieval, initialization, etc.
    *   Depends on `ILoggingService` and `ConfigurationService`.
*   **`clientRegistry` (Internal `Map<string, AnyMCPClient>`)**:
    *   Stores the definitions of all registered MCP clients, keyed by their unique `id`.
    *   Managed by `registerClient` and accessed by `getClient` and `listClients`.
*   **`initializedClientCache` (Internal `Map<string, Effect.Effect<unknown, ClientConfigurationError | ClientInitializationError>>`)**:
    *   *Optional but recommended.* Stores the `Effect` representing the *result* of initializing a client (either the initialized instance or the initialization/configuration error).
    *   Keyed by `clientId`.
    *   Used by `getClient` to return cached results (success or failure) without re-running initialization logic if the same client is requested multiple times within a relevant scope (e.g., per request/agent run). The cache stores the Effect itself to handle concurrent requests for the same client correctly using Effect's built-in caching mechanisms (`Effect.cached`).
*   **`AnyMCPClient` (Type)**:
    *   Represents the structure defining an MCP client, including:
        *   `id`: Unique string identifier.
        *   `name`, `description`, `tags`: Metadata.
        *   `configSchema`: Zod schema for required configuration.
        *   `initialize`: The Effectful function `(config, context) => Effect<ClientInstance, ClientInitializationError>` responsible for creating the usable client instance.
*   **`MCPClientExecutionContext` (Interface)**:
    *   Provides necessary framework services (`ILoggingService`, `ConfigurationService`) to the `initialize` function of an `MCPClient`.

## 4. Core Logic Flows

*   **Registration (`registerClient`)**:
    1.  Receive `AnyMCPClient` definition.
    2.  Acquire logger instance from `LoggingService`.
    3.  Check if `clientId` already exists in `clientRegistry`.
    4.  If exists, log error and return `Effect.fail(new ClientRegistrationError(...))`.
    5.  If not exists, add the client definition to `clientRegistry`.
    6.  Log success.
    7.  Return `Effect.void`.
*   **Listing (`listClients`)**:
    1.  Get all values from `clientRegistry`.
    2.  If `options.tags` are provided, filter the list based on matching tags.
    3.  Return `Effect.succeed(filteredList)`.
*   **Retrieval & Initialization (`getClient`)**:
    1.  Receive `clientId`.
    2.  Acquire logger instance.
    3.  **Cache Check (using `Effect.cached` or similar pattern):**
        *   Check if an initialization `Effect` for this `clientId` exists in `initializedClientCache`.
        *   If yes, return the cached `Effect`.
        *   If no, proceed to create the initialization `Effect` (steps 4-10) and wrap it with a caching mechanism (like `Effect.cached`) before storing it in the cache and returning it.
    4.  **Get Definition:** Look up `clientId` in `clientRegistry`.
        *   If not found, log error and `Effect.fail(new ClientNotFoundError(...))`.
    5.  **Fetch Configuration:** Use `ConfigurationService` to get the configuration object expected for this client (e.g., from `mcpClients.${clientId}`).
        *   Handle potential errors from `ConfigurationService` (e.g., config path not found) -> `Effect.fail(new ClientConfigurationError(...))`.
    6.  **Validate Configuration:** Use the `clientDefinition.configSchema.safeParseAsync` (or `safeParse` if sync is acceptable) on the fetched configuration.
        *   If validation fails, log detailed validation errors (Zod issues) and `Effect.fail(new ClientConfigurationError(...))`.
    7.  **Create Context:** Instantiate `MCPClientExecutionContext` with required services (`LoggingService`, `ConfigurationService`).
    8.  **Initialize Client:** Call `clientDefinition.initialize(validatedConfig, context)`.
        *   This returns an `Effect<ClientInstance, ClientInitializationError>`.
        *   Use `Effect.mapError` to ensure any error from `initialize` is wrapped in `ClientInitializationError` if it isn't already.
    9.  **Log Success/Failure:** Log the outcome of the initialization attempt.
    10. **Return Result:** Return the `Effect` resulting from the `initialize` call (which contains either the `ClientInstance` in the success channel or `ClientInitializationError` / `ClientConfigurationError` in the error channel). This Effect is the one potentially cached in step 3.

## 5. Interaction with Dependencies

*   **`LoggingService`:** Used extensively within all methods (`registerClient`, `getClient`) to log informational messages, warnings (e.g., validation failures), and errors with contextual information (`clientId`, `service: "MCPClientService"`). Passed via `MCPClientExecutionContext` to the client's `initialize` function.
*   **`ConfigurationService`:** Used exclusively within the `getClient` flow to fetch the raw configuration data required by a specific client definition. Passed via `MCPClientExecutionContext` to the client's `initialize` function, allowing the client itself to potentially access further configuration if needed (though primary config should be passed directly).

## 6. Error Handling

*   Errors are handled using Effect's error channel.
*   Specific error types are defined and returned:
    *   `ClientRegistrationError`: Duplicate ID during registration.
    *   `ClientNotFoundError`: `getClient` called with an unknown ID.
    *   `ClientConfigurationError`: Failure to fetch configuration OR failure to validate configuration against the client's Zod schema. Should contain underlying cause (e.g., ZodError issues).
    *   `ClientInitializationError`: The client's `initialize` Effect failed. Should contain the underlying cause.
*   Errors are logged with context before being returned in the Effect's failure channel.

## 7. Configuration Handling

*   The service itself doesn't define configuration schemas but relies on schemas provided within each `AnyMCPClient` definition (`configSchema`).
*   It assumes a convention for where client configurations are stored, managed by `ConfigurationService` (e.g., `mcpClients.<clientId>`).
*   It orchestrates the fetching and validation against the specific client's schema during the `getClient` flow.

## 8. Extensibility

*   New MCP clients are added by:
    1.  Defining an object conforming to the `AnyMCPClient` structure (implementing `id`, `name`, `description`, `configSchema`, `initialize`).
    2.  Registering this definition instance with the `MCPClientService` using `registerClient`, typically during application setup/layer composition.

## 9. Caching Strategy

*   Caching initialized clients is crucial for performance, especially if `getClient` is called multiple times for the same client within a short timeframe or processing scope.
*   The recommended approach is to cache the *initialization Effect* itself using `Effect.cached` or a similar Effect combinator.
    *   This ensures that concurrent requests for the same client don't trigger multiple initializations but instead subscribe to the result of the single, ongoing initialization Effect.
    *   It correctly caches both success (the initialized client) and failure (the configuration/initialization error), preventing repeated attempts if the underlying issue persists.
*   The scope of the cache (e.g., global singleton, request-scoped) depends on the application's architecture and how the `MCPClientServiceLive` instance is managed within the Effect Layers. A Layer-scoped singleton is often appropriate.

## 10. Standard Library Integration

*   The framework can provide a set of pre-defined `AnyMCPClient` objects (e.g., for Gmail, GitHub).
*   Application authors can easily import these definitions and register them with the `MCPClientService` during setup.
