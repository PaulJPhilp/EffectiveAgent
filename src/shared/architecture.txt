# Model Service Architecture

## Overview
The Model Service manages AI model selection, configuration, and execution. It provides a unified interface for model operations while ensuring type safety and proper configuration management, following the project's shared services architecture pattern.

## Interface Definitions

### ModelService
Main service for model operations and management.

```typescript
interface ModelCompletionOptions {
    prompt: string;
    systemPrompt?: string;
    temperature?: number;
    maxTokens?: number;
    thinkingLevel?: 'none' | 'low' | 'medium' | 'high';
    format?: 'text' | 'json' | 'image' | 'embedding';
}

interface ModelConfig {
    readonly provider: string;
    readonly model: string;
    readonly maxTokens: number;
    readonly temperature: number;
    readonly capabilities: string[];
}

class ModelService {
    constructor(config: AgentConfig);
    completeWithModel(
        modelId: string,
        options: ModelCompletionOptions
    ): Promise<ModelCompletionResponse>;
    getModelById(modelId: string): ModelConfig;
    getModelsWithCapability(capability: ModelCapability): ModelConfig[];
}
```

## Error Types
1. Model Not Found Error
   - Thrown when requested model doesn't exist
   - Error code: MODEL_NOT_FOUND

2. Model Execution Error
   - Thrown when model execution fails
   - Error code: MODEL_EXECUTION_ERROR

3. Invalid Model Configuration
   - Thrown when model configuration is invalid
   - Error code: MODEL_CONFIG_ERROR

4. Provider Error
   - Thrown when provider operations fail
   - Error code: PROVIDER_ERROR

## Implementation Details

### Design Patterns
1. Factory Pattern
   - ModelSelectionFactory for model instantiation
   - Provider-specific model creation

2. Strategy Pattern
   - Interchangeable model providers
   - Runtime provider selection

3. Registry Pattern
   - ModelRegistryService for model management
   - Centralized model configuration

### Key Components
1. Model Registry
   - Manages model configurations
   - Validates model schemas using Zod
   - Capability-based model lookup

2. Model Selection
   - Capability-based selection
   - Provider compatibility checking
   - Configuration validation

3. Provider Integration
   - Unified provider interface
   - Provider-specific optimizations
   - Error handling and retries

### Error Handling
- Provider-specific error mapping
- Detailed error context
- Retry mechanisms for transient failures

### Type Safety
- Strong TypeScript typing
- Runtime schema validation
- Provider type checking

### Model Features
1. Capability Management
   - Text generation
   - Function calling
   - Embeddings
   - Image generation

2. Configuration Management
   - Environment-aware settings
   - Provider-specific parameters
   - Default configurations

3. Performance Optimization
   - Token counting
   - Rate limiting
   - Resource management

## Implementation of Service Pattern
This document outlines how the standard architecture pattern is applied to the Model entity in our application.

## File Structure
```
src/shared/services/model/
├── __tests__/                    # Test files
│   ├── modelService.test.ts      # Tests for model service implementation
│   └── modelConfigurationService.test.ts  # Tests for model configuration
├── schemas/                      # Schema definitions
│   └── modelConfig.ts            # Zod schema for model entities
├── types.ts                      # Type definitions and interfaces
├── errors.ts                     # Error classes
├── modelService.ts               # Model service implementation
└── modelConfigurationService.ts  # Model configuration service
```

## Component Details

### Interface (`types.ts`)
- Defines `IModelService` interface with the following key methods:
  - `generateText`: Generates text using specified options
  - `generateObject<T>`: Generates typed objects with validation
  - `generateEmbedding`: Generates vector embeddings
  - `generateImage`: Generates images from text prompts
- Includes supporting types:
  - `ModelServiceConfig`: Configuration for the model service
  - Re-exports `ModelConfig` and `ModelConfigFile` from schemas

### Schema (`schemas/modelConfig.ts`)
- Uses Zod for model configuration validation
- Defines schemas:
  - `ModelConfigSchema`: Schema for individual model configurations
  - `ModelConfigFileSchema`: Schema for the entire models.json file
- Defines types:
  - `ModelConfig`: Type for a single model configuration
  - `ModelsConfig`: Type for an array of model configurations
  - `ModelConfigFile`: Type for the entire configuration file
- Includes enums for model capabilities, thinking levels, and context window sizes

### Errors (`errors.ts`)
- Defines model-specific error classes:
  - `ModelServiceError`: Base error class for model service
  - `ValidationError`: Thrown when object generation fails validation
  - `GenerationError`: Thrown when model generation fails
  - `ModelConfigError`: Thrown when model configuration is invalid

### Service Implementation (`modelService.ts`)
- Implements the `IModelService` interface
- Uses the `ModelConfigurationService` to load model configurations
- Handles text generation, object generation, embeddings, and image generation
- Implements proper error handling with domain-specific errors

### Configuration Service (`modelConfigurationService.ts`)
- Extends the base `ConfigurationService`
- Loads and validates model configurations from JSON files
- Provides access to model configurations by ID
- Implements validation using the Zod schemas

### Tests (`__tests__/modelService.test.ts`)
- Tests all service methods:
  - Text generation
  - Object generation with validation
  - Error handling for validation errors and generation errors
- Uses mock providers to simulate different scenarios

## Configuration Files
The model service uses a `models.json` file with the following structure:
```json
{
  "name": "model-configurations",
  "version": "1.0.0",
  "models": [
    {
      "id": "model-id",
      "provider": "provider-id",
      "modelName": "Model Name",
      "capabilities": ["text-generation", "embeddings"],
      "contextWindowSize": "medium-context-window"
      // Additional model-specific properties
    }
  ]
}
```

## Best Practices Applied
1. **Type Safety**: All methods use proper TypeScript generics and types
2. **Validation**: Object generation includes runtime validation
3. **Error Handling**: Specific error types for different failure scenarios
4. **Synchronous Configuration**: Model configurations are loaded synchronously
5. **Mockability**: All dependencies can be easily mocked for testing
